
ECEN-361-STM32-Lab-01-multiboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006674  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006804  08006804  00007804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800690c  0800690c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  0800690c  0800690c  0000790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006914  08006914  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006914  08006914  00007914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006918  08006918  00007918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800691c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000068  08006984  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08006984  000083b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bd2  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fe  00000000  00000000  0001ac6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  0001d268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd1  00000000  00000000  0001e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002968f  00000000  00000000  0001f1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014233  00000000  00000000  00048878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001071d6  00000000  00000000  0005caab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163c81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005278  00000000  00000000  00163cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00168f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067ec 	.word	0x080067ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080067ec 	.word	0x080067ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	607a      	str	r2, [r7, #4]
 800056a:	461a      	mov	r2, r3
 800056c:	460b      	mov	r3, r1
 800056e:	817b      	strh	r3, [r7, #10]
 8000570:	4613      	mov	r3, r2
 8000572:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000574:	2300      	movs	r3, #0
 8000576:	75fb      	strb	r3, [r7, #23]
 8000578:	e038      	b.n	80005ec <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 800057a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d10f      	bne.n	80005a2 <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 8000582:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	b2da      	uxtb	r2, r3
 800058c:	897b      	ldrh	r3, [r7, #10]
 800058e:	4619      	mov	r1, r3
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	f002 fc55 	bl	8002e40 <HAL_GPIO_WritePin>
			val >>= 1;
 8000596:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800059a:	085b      	lsrs	r3, r3, #1
 800059c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80005a0:	e00f      	b.n	80005c2 <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005a2:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	09db      	lsrs	r3, r3, #7
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	897b      	ldrh	r3, [r7, #10]
 80005b0:	4619      	mov	r1, r3
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f002 fc44 	bl	8002e40 <HAL_GPIO_WritePin>
			val <<= 1;
 80005b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005c2:	893b      	ldrh	r3, [r7, #8]
 80005c4:	2200      	movs	r2, #0
 80005c6:	4619      	mov	r1, r3
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f002 fc39 	bl	8002e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f002 fc33 	bl	8002e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2200      	movs	r2, #0
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f002 fc2d 	bl	8002e40 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005e6:	7dfb      	ldrb	r3, [r7, #23]
 80005e8:	3301      	adds	r3, #1
 80005ea:	75fb      	strb	r3, [r7, #23]
 80005ec:	7dfb      	ldrb	r3, [r7, #23]
 80005ee:	2b07      	cmp	r3, #7
 80005f0:	d9c3      	bls.n	800057a <shiftOut+0x1a>
	}
}
 80005f2:	bf00      	nop
 80005f4:	bf00      	nop
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MultiFunctionShield_Display>:
volatile uint8_t SEGMENT_VALUE[4];

//static MultiFunctionShield *instance;

void MultiFunctionShield_Display (int16_t value)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
  if ((value > 9999) || (value < -999))   // out of range
 8000606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800060a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800060e:	4293      	cmp	r3, r2
 8000610:	dc04      	bgt.n	800061c <MultiFunctionShield_Display+0x20>
 8000612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000616:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800061a:	dc0c      	bgt.n	8000636 <MultiFunctionShield_Display+0x3a>
  {
    SEGMENT_VALUE[0] = SEGMENT_MINUS;
 800061c:	22bf      	movs	r2, #191	@ 0xbf
 800061e:	4b76      	ldr	r3, [pc, #472]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 8000620:	701a      	strb	r2, [r3, #0]
    SEGMENT_VALUE[1] = SEGMENT_MINUS;
 8000622:	22bf      	movs	r2, #191	@ 0xbf
 8000624:	4b74      	ldr	r3, [pc, #464]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 8000626:	705a      	strb	r2, [r3, #1]
    SEGMENT_VALUE[2] = SEGMENT_MINUS;
 8000628:	22bf      	movs	r2, #191	@ 0xbf
 800062a:	4b73      	ldr	r3, [pc, #460]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 800062c:	709a      	strb	r2, [r3, #2]
    SEGMENT_VALUE[3] = SEGMENT_MINUS;
 800062e:	22bf      	movs	r2, #191	@ 0xbf
 8000630:	4b71      	ldr	r3, [pc, #452]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 8000632:	70da      	strb	r2, [r3, #3]
        SEGMENT_VALUE[2] = SEGMENT_BLANK;

      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
    }
  }
}
 8000634:	e0da      	b.n	80007ec <MultiFunctionShield_Display+0x1f0>
    if (value >= 0)   // positive values
 8000636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800063a:	2b00      	cmp	r3, #0
 800063c:	db71      	blt.n	8000722 <MultiFunctionShield_Display+0x126>
      if (value > 999)
 800063e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000642:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000646:	db0f      	blt.n	8000668 <MultiFunctionShield_Display+0x6c>
        SEGMENT_VALUE[0] = SEGMENT_MAP [(uint8_t) (value / 1000)];
 8000648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800064c:	4a6b      	ldr	r2, [pc, #428]	@ (80007fc <MultiFunctionShield_Display+0x200>)
 800064e:	fb82 1203 	smull	r1, r2, r2, r3
 8000652:	1192      	asrs	r2, r2, #6
 8000654:	17db      	asrs	r3, r3, #31
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	b21b      	sxth	r3, r3
 800065a:	b2db      	uxtb	r3, r3
 800065c:	461a      	mov	r2, r3
 800065e:	4b68      	ldr	r3, [pc, #416]	@ (8000800 <MultiFunctionShield_Display+0x204>)
 8000660:	5c9a      	ldrb	r2, [r3, r2]
 8000662:	4b65      	ldr	r3, [pc, #404]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e002      	b.n	800066e <MultiFunctionShield_Display+0x72>
        SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000668:	22ff      	movs	r2, #255	@ 0xff
 800066a:	4b63      	ldr	r3, [pc, #396]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 800066c:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 800066e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000672:	2b63      	cmp	r3, #99	@ 0x63
 8000674:	dd1b      	ble.n	80006ae <MultiFunctionShield_Display+0xb2>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067a:	4a62      	ldr	r2, [pc, #392]	@ (8000804 <MultiFunctionShield_Display+0x208>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	1152      	asrs	r2, r2, #5
 8000682:	17db      	asrs	r3, r3, #31
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	b21a      	sxth	r2, r3
 8000688:	4b5f      	ldr	r3, [pc, #380]	@ (8000808 <MultiFunctionShield_Display+0x20c>)
 800068a:	fb83 1302 	smull	r1, r3, r3, r2
 800068e:	1099      	asrs	r1, r3, #2
 8000690:	17d3      	asrs	r3, r2, #31
 8000692:	1ac9      	subs	r1, r1, r3
 8000694:	460b      	mov	r3, r1
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	440b      	add	r3, r1
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	b21b      	sxth	r3, r3
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b56      	ldr	r3, [pc, #344]	@ (8000800 <MultiFunctionShield_Display+0x204>)
 80006a6:	5c9a      	ldrb	r2, [r3, r2]
 80006a8:	4b53      	ldr	r3, [pc, #332]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 80006aa:	705a      	strb	r2, [r3, #1]
 80006ac:	e002      	b.n	80006b4 <MultiFunctionShield_Display+0xb8>
        SEGMENT_VALUE[1] = SEGMENT_BLANK;
 80006ae:	22ff      	movs	r2, #255	@ 0xff
 80006b0:	4b51      	ldr	r3, [pc, #324]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 80006b2:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 80006b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b8:	2b09      	cmp	r3, #9
 80006ba:	dd1b      	ble.n	80006f4 <MultiFunctionShield_Display+0xf8>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 80006bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c0:	4a51      	ldr	r2, [pc, #324]	@ (8000808 <MultiFunctionShield_Display+0x20c>)
 80006c2:	fb82 1203 	smull	r1, r2, r2, r3
 80006c6:	1092      	asrs	r2, r2, #2
 80006c8:	17db      	asrs	r3, r3, #31
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	b21a      	sxth	r2, r3
 80006ce:	4b4e      	ldr	r3, [pc, #312]	@ (8000808 <MultiFunctionShield_Display+0x20c>)
 80006d0:	fb83 1302 	smull	r1, r3, r3, r2
 80006d4:	1099      	asrs	r1, r3, #2
 80006d6:	17d3      	asrs	r3, r2, #31
 80006d8:	1ac9      	subs	r1, r1, r3
 80006da:	460b      	mov	r3, r1
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	440b      	add	r3, r1
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b45      	ldr	r3, [pc, #276]	@ (8000800 <MultiFunctionShield_Display+0x204>)
 80006ec:	5c9a      	ldrb	r2, [r3, r2]
 80006ee:	4b42      	ldr	r3, [pc, #264]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 80006f0:	709a      	strb	r2, [r3, #2]
 80006f2:	e002      	b.n	80006fa <MultiFunctionShield_Display+0xfe>
        SEGMENT_VALUE[2] = SEGMENT_BLANK;
 80006f4:	22ff      	movs	r2, #255	@ 0xff
 80006f6:	4b40      	ldr	r3, [pc, #256]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 80006f8:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 80006fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006fe:	4b42      	ldr	r3, [pc, #264]	@ (8000808 <MultiFunctionShield_Display+0x20c>)
 8000700:	fb83 1302 	smull	r1, r3, r3, r2
 8000704:	1099      	asrs	r1, r3, #2
 8000706:	17d3      	asrs	r3, r2, #31
 8000708:	1ac9      	subs	r1, r1, r3
 800070a:	460b      	mov	r3, r1
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	440b      	add	r3, r1
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	b21b      	sxth	r3, r3
 8000716:	b2db      	uxtb	r3, r3
 8000718:	461a      	mov	r2, r3
 800071a:	4b39      	ldr	r3, [pc, #228]	@ (8000800 <MultiFunctionShield_Display+0x204>)
 800071c:	5c9a      	ldrb	r2, [r3, r2]
 800071e:	4b36      	ldr	r3, [pc, #216]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 8000720:	70da      	strb	r2, [r3, #3]
    if (value < 0)      // negative values: "-" left
 8000722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da60      	bge.n	80007ec <MultiFunctionShield_Display+0x1f0>
      value *= -1;
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	425b      	negs	r3, r3
 800072e:	b29b      	uxth	r3, r3
 8000730:	80fb      	strh	r3, [r7, #6]
      SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000732:	22bf      	movs	r2, #191	@ 0xbf
 8000734:	4b30      	ldr	r3, [pc, #192]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 8000736:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 8000738:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800073c:	2b63      	cmp	r3, #99	@ 0x63
 800073e:	dd1b      	ble.n	8000778 <MultiFunctionShield_Display+0x17c>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000744:	4a2f      	ldr	r2, [pc, #188]	@ (8000804 <MultiFunctionShield_Display+0x208>)
 8000746:	fb82 1203 	smull	r1, r2, r2, r3
 800074a:	1152      	asrs	r2, r2, #5
 800074c:	17db      	asrs	r3, r3, #31
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	b21a      	sxth	r2, r3
 8000752:	4b2d      	ldr	r3, [pc, #180]	@ (8000808 <MultiFunctionShield_Display+0x20c>)
 8000754:	fb83 1302 	smull	r1, r3, r3, r2
 8000758:	1099      	asrs	r1, r3, #2
 800075a:	17d3      	asrs	r3, r2, #31
 800075c:	1ac9      	subs	r1, r1, r3
 800075e:	460b      	mov	r3, r1
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	440b      	add	r3, r1
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	b21b      	sxth	r3, r3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <MultiFunctionShield_Display+0x204>)
 8000770:	5c9a      	ldrb	r2, [r3, r2]
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 8000774:	705a      	strb	r2, [r3, #1]
 8000776:	e002      	b.n	800077e <MultiFunctionShield_Display+0x182>
        SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000778:	22ff      	movs	r2, #255	@ 0xff
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 800077c:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 800077e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000782:	2b09      	cmp	r3, #9
 8000784:	dd1b      	ble.n	80007be <MultiFunctionShield_Display+0x1c2>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 8000786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800078a:	4a1f      	ldr	r2, [pc, #124]	@ (8000808 <MultiFunctionShield_Display+0x20c>)
 800078c:	fb82 1203 	smull	r1, r2, r2, r3
 8000790:	1092      	asrs	r2, r2, #2
 8000792:	17db      	asrs	r3, r3, #31
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MultiFunctionShield_Display+0x20c>)
 800079a:	fb83 1302 	smull	r1, r3, r3, r2
 800079e:	1099      	asrs	r1, r3, #2
 80007a0:	17d3      	asrs	r3, r2, #31
 80007a2:	1ac9      	subs	r1, r1, r3
 80007a4:	460b      	mov	r3, r1
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	440b      	add	r3, r1
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MultiFunctionShield_Display+0x204>)
 80007b6:	5c9a      	ldrb	r2, [r3, r2]
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 80007ba:	709a      	strb	r2, [r3, #2]
 80007bc:	e002      	b.n	80007c4 <MultiFunctionShield_Display+0x1c8>
        SEGMENT_VALUE[2] = SEGMENT_BLANK;
 80007be:	22ff      	movs	r2, #255	@ 0xff
 80007c0:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 80007c2:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 80007c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MultiFunctionShield_Display+0x20c>)
 80007ca:	fb83 1302 	smull	r1, r3, r3, r2
 80007ce:	1099      	asrs	r1, r3, #2
 80007d0:	17d3      	asrs	r3, r2, #31
 80007d2:	1ac9      	subs	r1, r1, r3
 80007d4:	460b      	mov	r3, r1
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	440b      	add	r3, r1
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	b21b      	sxth	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MultiFunctionShield_Display+0x204>)
 80007e6:	5c9a      	ldrb	r2, [r3, r2]
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <MultiFunctionShield_Display+0x1fc>)
 80007ea:	70da      	strb	r2, [r3, #3]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	20000088 	.word	0x20000088
 80007fc:	10624dd3 	.word	0x10624dd3
 8000800:	08006880 	.word	0x08006880
 8000804:	51eb851f 	.word	0x51eb851f
 8000808:	66666667 	.word	0x66666667

0800080c <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 8000810:	22ff      	movs	r2, #255	@ 0xff
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MultiFunctionShield_Clear+0x28>)
 8000814:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000816:	22ff      	movs	r2, #255	@ 0xff
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MultiFunctionShield_Clear+0x28>)
 800081a:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 800081c:	22ff      	movs	r2, #255	@ 0xff
 800081e:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <MultiFunctionShield_Clear+0x28>)
 8000820:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 8000822:	22ff      	movs	r2, #255	@ 0xff
 8000824:	4b03      	ldr	r3, [pc, #12]	@ (8000834 <MultiFunctionShield_Clear+0x28>)
 8000826:	70da      	strb	r2, [r3, #3]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000088 	.word	0x20000088

08000838 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af02      	add	r7, sp, #8
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	4816      	ldr	r0, [pc, #88]	@ (80008a0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000848:	f002 fafa 	bl	8002e40 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800084c:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 800084e:	4a15      	ldr	r2, [pc, #84]	@ (80008a4 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000850:	5cd3      	ldrb	r3, [r2, r3]
 8000852:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	2301      	movs	r3, #1
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800085e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000862:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000866:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086a:	f7ff fe79 	bl	8000560 <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800086e:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000870:	4a0d      	ldr	r2, [pc, #52]	@ (80008a8 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 8000872:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	2301      	movs	r3, #1
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800087e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000882:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088a:	f7ff fe69 	bl	8000560 <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2120      	movs	r1, #32
 8000892:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000894:	f002 fad4 	bl	8002e40 <HAL_GPIO_WritePin>
	}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	48000400 	.word	0x48000400
 80008a4:	20000088 	.word	0x20000088
 80008a8:	0800688c 	.word	0x0800688c

080008ac <MultiFunctionShield__ISRFunc>:

void MultiFunctionShield__ISRFunc(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 80008b0:	4b16      	ldr	r3, [pc, #88]	@ (800090c <MultiFunctionShield__ISRFunc+0x60>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	3301      	adds	r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MultiFunctionShield__ISRFunc+0x60>)
 80008bc:	4611      	mov	r1, r2
 80008be:	7019      	strb	r1, [r3, #0]
 80008c0:	4613      	mov	r3, r2
 80008c2:	3b01      	subs	r3, #1
 80008c4:	2b03      	cmp	r3, #3
 80008c6:	d81e      	bhi.n	8000906 <MultiFunctionShield__ISRFunc+0x5a>
 80008c8:	a201      	add	r2, pc, #4	@ (adr r2, 80008d0 <MultiFunctionShield__ISRFunc+0x24>)
 80008ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ce:	bf00      	nop
 80008d0:	080008e1 	.word	0x080008e1
 80008d4:	080008e9 	.word	0x080008e9
 80008d8:	080008f1 	.word	0x080008f1
 80008dc:	080008f9 	.word	0x080008f9
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff ffa9 	bl	8000838 <MultiFunctionShield_WriteNumberToSegment>
 80008e6:	e00e      	b.n	8000906 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff ffa5 	bl	8000838 <MultiFunctionShield_WriteNumberToSegment>
 80008ee:	e00a      	b.n	8000906 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 80008f0:	2002      	movs	r0, #2
 80008f2:	f7ff ffa1 	bl	8000838 <MultiFunctionShield_WriteNumberToSegment>
 80008f6:	e006      	b.n	8000906 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 80008f8:	2003      	movs	r0, #3
 80008fa:	f7ff ff9d 	bl	8000838 <MultiFunctionShield_WriteNumberToSegment>
 80008fe:	4b03      	ldr	r3, [pc, #12]	@ (800090c <MultiFunctionShield__ISRFunc+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	bf00      	nop
  }
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000084 	.word	0x20000084

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int16_t Seven_Seg_Count = 9900;
 8000916:	f242 63ac 	movw	r3, #9900	@ 0x26ac
 800091a:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091c:	f000 fde8 	bl	80014f0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f8b6 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f000 fa3a 	bl	8000d9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000928:	f000 fa08 	bl	8000d3c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800092c:	f000 f9b8 	bl	8000ca0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000930:	f000 f9de 	bl	8000cf0 <MX_TIM17_Init>
  MX_ADC2_Init();
 8000934:	f000 f8fe 	bl	8000b34 <MX_ADC2_Init>
  MX_TIM15_Init();
 8000938:	f000 f960 	bl	8000bfc <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  // HAL_TIM_Base_Start_IT(&htim7);
  HAL_TIM_Base_Start_IT(&htim15);
 800093c:	483d      	ldr	r0, [pc, #244]	@ (8000a34 <main+0x124>)
 800093e:	f003 fe41 	bl	80045c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000942:	483d      	ldr	r0, [pc, #244]	@ (8000a38 <main+0x128>)
 8000944:	f003 fe3e 	bl	80045c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);  // LED SevenSeg cycle thru them
 8000948:	483c      	ldr	r0, [pc, #240]	@ (8000a3c <main+0x12c>)
 800094a:	f003 fe3b 	bl	80045c4 <HAL_TIM_Base_Start_IT>
  MultiFunctionShield_Clear();
 800094e:	f7ff ff5d 	bl	800080c <MultiFunctionShield_Clear>


  // Clear the lights
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	2120      	movs	r1, #32
 8000956:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095a:	f002 fa71 	bl	8002e40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2140      	movs	r1, #64	@ 0x40
 8000962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000966:	f002 fa6b 	bl	8002e40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	2180      	movs	r1, #128	@ 0x80
 800096e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000972:	f002 fa65 	bl	8002e40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	2140      	movs	r1, #64	@ 0x40
 800097a:	4831      	ldr	r0, [pc, #196]	@ (8000a40 <main+0x130>)
 800097c:	f002 fa60 	bl	8002e40 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("\033\143");  // clear the terminal before printing
 8000980:	4830      	ldr	r0, [pc, #192]	@ (8000a44 <main+0x134>)
 8000982:	f005 f8c5 	bl	8005b10 <iprintf>
  printf("Hello Lab-1 -- Multifunction Board \n\r\n\r");
 8000986:	4830      	ldr	r0, [pc, #192]	@ (8000a48 <main+0x138>)
 8000988:	f005 f8c2 	bl	8005b10 <iprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// HAL_GPIO_TogglePin(LED_D1_GPIO_Port, LED_D1_Pin);
	MultiFunctionShield_Display( Seven_Seg_Count);
 800098c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe33 	bl	80005fc <MultiFunctionShield_Display>
	if (Seven_Seg_Count_Dir == UP)
 8000996:	4b2d      	ldr	r3, [pc, #180]	@ (8000a4c <main+0x13c>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10d      	bne.n	80009ba <main+0xaa>
		{ Seven_Seg_Count = (Seven_Seg_Count==9999)?0:Seven_Seg_Count+1; }
 800099e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d004      	beq.n	80009b4 <main+0xa4>
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	3301      	adds	r3, #1
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	e000      	b.n	80009b6 <main+0xa6>
 80009b4:	2300      	movs	r3, #0
 80009b6:	80fb      	strh	r3, [r7, #6]
 80009b8:	e00b      	b.n	80009d2 <main+0xc2>
	else
		{ Seven_Seg_Count = (Seven_Seg_Count==0)?9999:Seven_Seg_Count-1; }
 80009ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d004      	beq.n	80009cc <main+0xbc>
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	e001      	b.n	80009d0 <main+0xc0>
 80009cc:	f242 730f 	movw	r3, #9999	@ 0x270f
 80009d0:	80fb      	strh	r3, [r7, #6]



	// Start ADC Conversion of the 10K potentiometer
	HAL_ADC_Start(&hadc2);
 80009d2:	481f      	ldr	r0, [pc, #124]	@ (8000a50 <main+0x140>)
 80009d4:	f001 f960 	bl	8001c98 <HAL_ADC_Start>
	// The conversion should be less than a millisec
	// so it'll be done while we're waiting for the next number to show
	HAL_Delay(Increment_Delay);  // this is how long before the counter on the 7-Seg display
 80009d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a54 <main+0x144>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fe03 	bl	80015e8 <HAL_Delay>


   // Poll ADC2 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc2, 1);
 80009e2:	2101      	movs	r1, #1
 80009e4:	481a      	ldr	r0, [pc, #104]	@ (8000a50 <main+0x140>)
 80009e6:	f001 fa11 	bl	8001e0c <HAL_ADC_PollForConversion>
   // Read The ADC Conversion Result & Map It To PWM DutyCycle
	ADC_Result = HAL_ADC_GetValue(&hadc2);
 80009ea:	4819      	ldr	r0, [pc, #100]	@ (8000a50 <main+0x140>)
 80009ec:	f001 fae6 	bl	8001fbc <HAL_ADC_GetValue>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <main+0x148>)
 80009f6:	801a      	strh	r2, [r3, #0]
	// Want the delay to be between 1/100-sec and 1-sec
	// Math:    1 / 100 =  / 4095
	Increment_Delay = (uint16_t)(ADC_Result + 1) * 1000 / 4095;
 80009f8:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <main+0x148>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a06:	fb02 f303 	mul.w	r3, r2, r3
 8000a0a:	4a14      	ldr	r2, [pc, #80]	@ (8000a5c <main+0x14c>)
 8000a0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a10:	441a      	add	r2, r3
 8000a12:	12d2      	asrs	r2, r2, #11
 8000a14:	17db      	asrs	r3, r3, #31
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <main+0x144>)
 8000a1c:	801a      	strh	r2, [r3, #0]
	// Now show the value in the serial port
	// only 12 bits, and right-aligned.
	// printf("Pot value:  %u\r", (unsigned int) (ADC_Result & 0xfff));
	// HAL_Delay(1);
	if (TimeToPrint) {
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <main+0x150>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0b2      	beq.n	800098c <main+0x7c>
		OneSecond_Show_Potentiometer__ISRFunc();
 8000a26:	f000 f81d 	bl	8000a64 <OneSecond_Show_Potentiometer__ISRFunc>
		TimeToPrint=0;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <main+0x150>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
	MultiFunctionShield_Display( Seven_Seg_Count);
 8000a30:	e7ac      	b.n	800098c <main+0x7c>
 8000a32:	bf00      	nop
 8000a34:	200000f0 	.word	0x200000f0
 8000a38:	2000013c 	.word	0x2000013c
 8000a3c:	20000188 	.word	0x20000188
 8000a40:	48000400 	.word	0x48000400
 8000a44:	08006804 	.word	0x08006804
 8000a48:	08006808 	.word	0x08006808
 8000a4c:	20000262 	.word	0x20000262
 8000a50:	2000008c 	.word	0x2000008c
 8000a54:	20000260 	.word	0x20000260
 8000a58:	2000025c 	.word	0x2000025c
 8000a5c:	80080081 	.word	0x80080081
 8000a60:	2000025e 	.word	0x2000025e

08000a64 <OneSecond_Show_Potentiometer__ISRFunc>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void OneSecond_Show_Potentiometer__ISRFunc(void)
	{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	// printf("Got to the show Pot ISR");
	// HAL_Delay(1);
	printf("Current Tick:  %lu    :   Raw Pot Value: %u   Delay between number update: %d\n\r",uwTick,ADC_Result,Increment_Delay);
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <OneSecond_Show_Potentiometer__ISRFunc+0x1c>)
 8000a6a:	6819      	ldr	r1, [r3, #0]
 8000a6c:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <OneSecond_Show_Potentiometer__ISRFunc+0x20>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <OneSecond_Show_Potentiometer__ISRFunc+0x24>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <OneSecond_Show_Potentiometer__ISRFunc+0x28>)
 8000a78:	f005 f84a 	bl	8005b10 <iprintf>
	// HAL_Delay(1);
	}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000268 	.word	0x20000268
 8000a84:	2000025c 	.word	0x2000025c
 8000a88:	20000260 	.word	0x20000260
 8000a8c:	08006830 	.word	0x08006830

08000a90 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b096      	sub	sp, #88	@ 0x58
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	2244      	movs	r2, #68	@ 0x44
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 f88b 	bl	8005bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ab2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ab6:	f002 fa1b 	bl	8002ef0 <HAL_PWREx_ControlVoltageScaling>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ac0:	f000 fa88 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000acc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ace:	2310      	movs	r3, #16
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ada:	2301      	movs	r3, #1
 8000adc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ade:	230a      	movs	r3, #10
 8000ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ae2:	2307      	movs	r3, #7
 8000ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 fa52 	bl	8002f9c <HAL_RCC_OscConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000afe:	f000 fa69 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b02:	230f      	movs	r3, #15
 8000b04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b06:	2303      	movs	r3, #3
 8000b08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b16:	463b      	mov	r3, r7
 8000b18:	2104      	movs	r1, #4
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 fe1a 	bl	8003754 <HAL_RCC_ClockConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b26:	f000 fa55 	bl	8000fd4 <Error_Handler>
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	3758      	adds	r7, #88	@ 0x58
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
 8000b48:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b4a:	4b29      	ldr	r3, [pc, #164]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b4c:	4a29      	ldr	r2, [pc, #164]	@ (8000bf4 <MX_ADC2_Init+0xc0>)
 8000b4e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b50:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b56:	4b26      	ldr	r3, [pc, #152]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b62:	4b23      	ldr	r3, [pc, #140]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b74:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b88:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000baa:	4811      	ldr	r0, [pc, #68]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000bac:	f000 ff24 	bl	80019f8 <HAL_ADC_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000bb6:	f000 fa0d 	bl	8000fd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_ADC2_Init+0xc4>)
 8000bbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bc6:	237f      	movs	r3, #127	@ 0x7f
 8000bc8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <MX_ADC2_Init+0xbc>)
 8000bd8:	f001 f9fe 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000be2:	f000 f9f7 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000008c 	.word	0x2000008c
 8000bf4:	50040100 	.word	0x50040100
 8000bf8:	14f00020 	.word	0x14f00020

08000bfc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_TIM15_Init+0x9c>)
 8000c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000c9c <MX_TIM15_Init+0xa0>)
 8000c1e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 8000-1;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <MX_TIM15_Init+0x9c>)
 8000c22:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000c26:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <MX_TIM15_Init+0x9c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000-1;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_TIM15_Init+0x9c>)
 8000c30:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c34:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_TIM15_Init+0x9c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <MX_TIM15_Init+0x9c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_TIM15_Init+0x9c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000c48:	4813      	ldr	r0, [pc, #76]	@ (8000c98 <MX_TIM15_Init+0x9c>)
 8000c4a:	f003 fc63 	bl	8004514 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8000c54:	f000 f9be 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4619      	mov	r1, r3
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <MX_TIM15_Init+0x9c>)
 8000c66:	f003 fe1f 	bl	80048a8 <HAL_TIM_ConfigClockSource>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000c70:	f000 f9b0 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_TIM15_Init+0x9c>)
 8000c82:	f004 f837 	bl	8004cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000c8c:	f000 f9a2 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000f0 	.word	0x200000f0
 8000c9c:	40014000 	.word	0x40014000

08000ca0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <MX_TIM16_Init+0x48>)
 8000ca6:	4a11      	ldr	r2, [pc, #68]	@ (8000cec <MX_TIM16_Init+0x4c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000 -1;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_TIM16_Init+0x48>)
 8000cac:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000cb0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <MX_TIM16_Init+0x48>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 -1 ;
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <MX_TIM16_Init+0x48>)
 8000cba:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000cbe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_TIM16_Init+0x48>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <MX_TIM16_Init+0x48>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_TIM16_Init+0x48>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_TIM16_Init+0x48>)
 8000cd4:	f003 fc1e 	bl	8004514 <HAL_TIM_Base_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000cde:	f000 f979 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000013c 	.word	0x2000013c
 8000cec:	40014400 	.word	0x40014400

08000cf0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <MX_TIM17_Init+0x44>)
 8000cf6:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <MX_TIM17_Init+0x48>)
 8000cf8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <MX_TIM17_Init+0x44>)
 8000cfc:	f240 321f 	movw	r2, #799	@ 0x31f
 8000d00:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <MX_TIM17_Init+0x44>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000d08:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <MX_TIM17_Init+0x44>)
 8000d0a:	2264      	movs	r2, #100	@ 0x64
 8000d0c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <MX_TIM17_Init+0x44>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d14:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <MX_TIM17_Init+0x44>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <MX_TIM17_Init+0x44>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d20:	4804      	ldr	r0, [pc, #16]	@ (8000d34 <MX_TIM17_Init+0x44>)
 8000d22:	f003 fbf7 	bl	8004514 <HAL_TIM_Base_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000d2c:	f000 f952 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000188 	.word	0x20000188
 8000d38:	40014800 	.word	0x40014800

08000d3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d42:	4a15      	ldr	r2, [pc, #84]	@ (8000d98 <MX_USART2_UART_Init+0x5c>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_USART2_UART_Init+0x58>)
 8000d80:	f004 f85e 	bl	8004e40 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d8a:	f000 f923 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200001d4 	.word	0x200001d4
 8000d98:	40004400 	.word	0x40004400

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	@ 0x28
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b55      	ldr	r3, [pc, #340]	@ (8000f08 <MX_GPIO_Init+0x16c>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	4a54      	ldr	r2, [pc, #336]	@ (8000f08 <MX_GPIO_Init+0x16c>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dbe:	4b52      	ldr	r3, [pc, #328]	@ (8000f08 <MX_GPIO_Init+0x16c>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dca:	4b4f      	ldr	r3, [pc, #316]	@ (8000f08 <MX_GPIO_Init+0x16c>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	4a4e      	ldr	r2, [pc, #312]	@ (8000f08 <MX_GPIO_Init+0x16c>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8000f08 <MX_GPIO_Init+0x16c>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b49      	ldr	r3, [pc, #292]	@ (8000f08 <MX_GPIO_Init+0x16c>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	4a48      	ldr	r2, [pc, #288]	@ (8000f08 <MX_GPIO_Init+0x16c>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dee:	4b46      	ldr	r3, [pc, #280]	@ (8000f08 <MX_GPIO_Init+0x16c>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	4b43      	ldr	r3, [pc, #268]	@ (8000f08 <MX_GPIO_Init+0x16c>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfe:	4a42      	ldr	r2, [pc, #264]	@ (8000f08 <MX_GPIO_Init+0x16c>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e06:	4b40      	ldr	r3, [pc, #256]	@ (8000f08 <MX_GPIO_Init+0x16c>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1c:	f002 f810 	bl	8002e40 <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2160      	movs	r1, #96	@ 0x60
 8000e24:	4839      	ldr	r0, [pc, #228]	@ (8000f0c <MX_GPIO_Init+0x170>)
 8000e26:	f002 f80b 	bl	8002e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e30:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4833      	ldr	r0, [pc, #204]	@ (8000f10 <MX_GPIO_Init+0x174>)
 8000e42:	f001 fe53 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000e46:	2302      	movs	r3, #2
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e4a:	230b      	movs	r3, #11
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	482d      	ldr	r0, [pc, #180]	@ (8000f10 <MX_GPIO_Init+0x174>)
 8000e5a:	f001 fe47 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000e5e:	2312      	movs	r3, #18
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e76:	f001 fe39 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin SevenSeg_CLK_Pin
                           SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000e7a:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000e7e:	617b      	str	r3, [r7, #20]
                          |SevenSeg_DATA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e96:	f001 fe29 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e9e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <MX_GPIO_Init+0x170>)
 8000eb0:	f001 fe1c 	bl	8002aec <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_LATCH_Pin LED_D4_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin|LED_D4_Pin;
 8000eb4:	2360      	movs	r3, #96	@ 0x60
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4810      	ldr	r0, [pc, #64]	@ (8000f0c <MX_GPIO_Init+0x170>)
 8000ecc:	f001 fe0e 	bl	8002aec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2006      	movs	r0, #6
 8000ed6:	f001 fdd2 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000eda:	2006      	movs	r0, #6
 8000edc:	f001 fdeb 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2007      	movs	r0, #7
 8000ee6:	f001 fdca 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000eea:	2007      	movs	r0, #7
 8000eec:	f001 fde3 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	200a      	movs	r0, #10
 8000ef6:	f001 fdc2 	bl	8002a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000efa:	200a      	movs	r0, #10
 8000efc:	f001 fddb 	bl	8002ab6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	@ 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	48000800 	.word	0x48000800

08000f14 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f1c:	1d39      	adds	r1, r7, #4
 8000f1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f22:	2201      	movs	r2, #1
 8000f24:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <__io_putchar+0x20>)
 8000f26:	f003 ffd9 	bl	8004edc <HAL_UART_Transmit>

  return ch;
 8000f2a:	687b      	ldr	r3, [r7, #4]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200001d4 	.word	0x200001d4

08000f38 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
	// All three buttons generate GPIO  interrupts
	switch(GPIO_Pin)
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	2b10      	cmp	r3, #16
 8000f46:	d010      	beq.n	8000f6a <HAL_GPIO_EXTI_Callback+0x32>
 8000f48:	2b10      	cmp	r3, #16
 8000f4a:	dc14      	bgt.n	8000f76 <HAL_GPIO_EXTI_Callback+0x3e>
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d014      	beq.n	8000f7a <HAL_GPIO_EXTI_Callback+0x42>
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d110      	bne.n	8000f76 <HAL_GPIO_EXTI_Callback+0x3e>
	{
	case Button_1_Pin:
		// Toggle the count direction
		Seven_Seg_Count_Dir = (Seven_Seg_Count_Dir == UP)?DOWN:UP;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf0c      	ite	eq
 8000f5c:	2301      	moveq	r3, #1
 8000f5e:	2300      	movne	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f66:	701a      	strb	r2, [r3, #0]
		break;
 8000f68:	e008      	b.n	8000f7c <HAL_GPIO_EXTI_Callback+0x44>
	case Button_2_Pin:
		HAL_GPIO_TogglePin(LED_D1_GPIO_Port, LED_D1_Pin);
 8000f6a:	2120      	movs	r1, #32
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f70:	f001 ff7e 	bl	8002e70 <HAL_GPIO_TogglePin>
		break;
 8000f74:	e002      	b.n	8000f7c <HAL_GPIO_EXTI_Callback+0x44>
	case Button_3_Pin:
		break;
	default:
      __NOP();
 8000f76:	bf00      	nop
	}
}
 8000f78:	e000      	b.n	8000f7c <HAL_GPIO_EXTI_Callback+0x44>
		break;
 8000f7a:	bf00      	nop
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000262 	.word	0x20000262

08000f88 <HAL_TIM_PeriodElapsedCallback>:



// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	  printf("Got timer 7\n\r");
  }
  */

// Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 )
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d104      	bne.n	8000fa2 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    HAL_GPIO_TogglePin(LED_D3_GPIO_Port, LED_D3_Pin);
 8000f98:	2180      	movs	r1, #128	@ 0x80
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9e:	f001 ff67 	bl	8002e70 <HAL_GPIO_TogglePin>
  }

  if (htim == &htim17 )
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a08      	ldr	r2, [pc, #32]	@ (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x26>
  {
	  MultiFunctionShield__ISRFunc();
 8000faa:	f7ff fc7f 	bl	80008ac <MultiFunctionShield__ISRFunc>
  }

  if (htim == &htim15 )
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d102      	bne.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0x34>
  {
    // HAL_GPIO_TogglePin(LED_D1_GPIO_Port, LED_D1_Pin);
	TimeToPrint = 1;
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
  }


}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000013c 	.word	0x2000013c
 8000fc8:	20000188 	.word	0x20000188
 8000fcc:	200000f0 	.word	0x200000f0
 8000fd0:	2000025e 	.word	0x2000025e

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <Error_Handler+0x8>

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_MspInit+0x44>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fea:	4a0e      	ldr	r2, [pc, #56]	@ (8001024 <HAL_MspInit+0x44>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <HAL_MspInit+0x44>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_MspInit+0x44>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001002:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <HAL_MspInit+0x44>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001008:	6593      	str	r3, [r2, #88]	@ 0x58
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_MspInit+0x44>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0ac      	sub	sp, #176	@ 0xb0
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2288      	movs	r2, #136	@ 0x88
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f004 fdb6 	bl	8005bba <memset>
  if(hadc->Instance==ADC2)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a27      	ldr	r2, [pc, #156]	@ (80010f0 <HAL_ADC_MspInit+0xc8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d147      	bne.n	80010e8 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001058:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800105c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800105e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800106e:	2308      	movs	r3, #8
 8001070:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001072:	2307      	movs	r3, #7
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001076:	2302      	movs	r3, #2
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800107a:	2302      	movs	r3, #2
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800107e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001082:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fd87 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001094:	f7ff ff9e 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001098:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <HAL_ADC_MspInit+0xcc>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109c:	4a15      	ldr	r2, [pc, #84]	@ (80010f4 <HAL_ADC_MspInit+0xcc>)
 800109e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <HAL_ADC_MspInit+0xcc>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <HAL_ADC_MspInit+0xcc>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	4a0f      	ldr	r2, [pc, #60]	@ (80010f4 <HAL_ADC_MspInit+0xcc>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010bc:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <HAL_ADC_MspInit+0xcc>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010ce:	230b      	movs	r3, #11
 80010d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e4:	f001 fd02 	bl	8002aec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	37b0      	adds	r7, #176	@ 0xb0
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	50040100 	.word	0x50040100
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a27      	ldr	r2, [pc, #156]	@ (80011a4 <HAL_TIM_Base_MspInit+0xac>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d114      	bne.n	8001134 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800110a:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <HAL_TIM_Base_MspInit+0xb0>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110e:	4a26      	ldr	r2, [pc, #152]	@ (80011a8 <HAL_TIM_Base_MspInit+0xb0>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001114:	6613      	str	r3, [r2, #96]	@ 0x60
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <HAL_TIM_Base_MspInit+0xb0>)
 8001118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2018      	movs	r0, #24
 8001128:	f001 fca9 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800112c:	2018      	movs	r0, #24
 800112e:	f001 fcc2 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001132:	e032      	b.n	800119a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <HAL_TIM_Base_MspInit+0xb4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d114      	bne.n	8001168 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <HAL_TIM_Base_MspInit+0xb0>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001142:	4a19      	ldr	r2, [pc, #100]	@ (80011a8 <HAL_TIM_Base_MspInit+0xb0>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	6613      	str	r3, [r2, #96]	@ 0x60
 800114a:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <HAL_TIM_Base_MspInit+0xb0>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2019      	movs	r0, #25
 800115c:	f001 fc8f 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001160:	2019      	movs	r0, #25
 8001162:	f001 fca8 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
}
 8001166:	e018      	b.n	800119a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a10      	ldr	r2, [pc, #64]	@ (80011b0 <HAL_TIM_Base_MspInit+0xb8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d113      	bne.n	800119a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <HAL_TIM_Base_MspInit+0xb0>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001176:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <HAL_TIM_Base_MspInit+0xb0>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800117c:	6613      	str	r3, [r2, #96]	@ 0x60
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <HAL_TIM_Base_MspInit+0xb0>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	201a      	movs	r0, #26
 8001190:	f001 fc75 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001194:	201a      	movs	r0, #26
 8001196:	f001 fc8e 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40014000 	.word	0x40014000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40014400 	.word	0x40014400
 80011b0:	40014800 	.word	0x40014800

080011b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0ac      	sub	sp, #176	@ 0xb0
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2288      	movs	r2, #136	@ 0x88
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 fcf0 	bl	8005bba <memset>
  if(huart->Instance==USART2)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a21      	ldr	r2, [pc, #132]	@ (8001264 <HAL_UART_MspInit+0xb0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d13b      	bne.n	800125c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 fcd3 	bl	8003b9c <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011fc:	f7ff feea 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001200:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <HAL_UART_MspInit+0xb4>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001204:	4a18      	ldr	r2, [pc, #96]	@ (8001268 <HAL_UART_MspInit+0xb4>)
 8001206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800120a:	6593      	str	r3, [r2, #88]	@ 0x58
 800120c:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <HAL_UART_MspInit+0xb4>)
 800120e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <HAL_UART_MspInit+0xb4>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <HAL_UART_MspInit+0xb4>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001224:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <HAL_UART_MspInit+0xb4>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001230:	230c      	movs	r3, #12
 8001232:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001248:	2307      	movs	r3, #7
 800124a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001258:	f001 fc48 	bl	8002aec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800125c:	bf00      	nop
 800125e:	37b0      	adds	r7, #176	@ 0xb0
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40004400 	.word	0x40004400
 8001268:	40021000 	.word	0x40021000

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <NMI_Handler+0x4>

08001274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <MemManage_Handler+0x4>

08001284 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <UsageFault_Handler+0x4>

08001294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c2:	f000 f971 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}

080012ca <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 80012ce:	2001      	movs	r0, #1
 80012d0:	f001 fde8 	bl	8002ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 80012dc:	2002      	movs	r0, #2
 80012de:	f001 fde1 	bl	8002ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 80012ea:	2010      	movs	r0, #16
 80012ec:	f001 fdda 	bl	8002ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80012fa:	f003 f9d3 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000f0 	.word	0x200000f0

08001308 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800130e:	f003 f9c9 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	2000013c 	.word	0x2000013c

0800131c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001322:	f003 f9bf 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000188 	.word	0x20000188

08001330 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e00a      	b.n	8001358 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001342:	f3af 8000 	nop.w
 8001346:	4601      	mov	r1, r0
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	b2ca      	uxtb	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	dbf0      	blt.n	8001342 <_read+0x12>
  }

  return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e009      	b.n	8001390 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	60ba      	str	r2, [r7, #8]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fdc5 	bl	8000f14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf1      	blt.n	800137c <_write+0x12>
  }
  return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_close>:

int _close(int file)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ca:	605a      	str	r2, [r3, #4]
  return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <_isatty>:

int _isatty(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001414:	4a14      	ldr	r2, [pc, #80]	@ (8001468 <_sbrk+0x5c>)
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <_sbrk+0x60>)
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <_sbrk+0x64>)
 800142a:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <_sbrk+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142e:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	429a      	cmp	r2, r3
 800143a:	d207      	bcs.n	800144c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800143c:	f004 fc0c 	bl	8005c58 <__errno>
 8001440:	4603      	mov	r3, r0
 8001442:	220c      	movs	r2, #12
 8001444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e009      	b.n	8001460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800144c:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001452:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <_sbrk+0x64>)
 800145c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20018000 	.word	0x20018000
 800146c:	00000400 	.word	0x00000400
 8001470:	20000264 	.word	0x20000264
 8001474:	200003b8 	.word	0x200003b8

08001478 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <SystemInit+0x20>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001482:	4a05      	ldr	r2, [pc, #20]	@ (8001498 <SystemInit+0x20>)
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a0:	f7ff ffea 	bl	8001478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014a6:	490d      	ldr	r1, [pc, #52]	@ (80014dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a8:	4a0d      	ldr	r2, [pc, #52]	@ (80014e0 <LoopForever+0xe>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014bc:	4c0a      	ldr	r4, [pc, #40]	@ (80014e8 <LoopForever+0x16>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ca:	f004 fbcb 	bl	8005c64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ce:	f7ff fa1f 	bl	8000910 <main>

080014d2 <LoopForever>:

LoopForever:
    b LoopForever
 80014d2:	e7fe      	b.n	80014d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014e0:	0800691c 	.word	0x0800691c
  ldr r2, =_sbss
 80014e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014e8:	200003b8 	.word	0x200003b8

080014ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC1_2_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fa:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <HAL_Init+0x3c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <HAL_Init+0x3c>)
 8001500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001504:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001506:	2003      	movs	r0, #3
 8001508:	f001 faae 	bl	8002a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150c:	2000      	movs	r0, #0
 800150e:	f000 f80f 	bl	8001530 <HAL_InitTick>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	e001      	b.n	8001522 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800151e:	f7ff fd5f 	bl	8000fe0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001522:	79fb      	ldrb	r3, [r7, #7]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40022000 	.word	0x40022000

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800153c:	4b17      	ldr	r3, [pc, #92]	@ (800159c <HAL_InitTick+0x6c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d023      	beq.n	800158c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001544:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <HAL_InitTick+0x70>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <HAL_InitTick+0x6c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001552:	fbb3 f3f1 	udiv	r3, r3, r1
 8001556:	fbb2 f3f3 	udiv	r3, r2, r3
 800155a:	4618      	mov	r0, r3
 800155c:	f001 fab9 	bl	8002ad2 <HAL_SYSTICK_Config>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10f      	bne.n	8001586 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d809      	bhi.n	8001580 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f001 fa83 	bl	8002a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001578:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <HAL_InitTick+0x74>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e007      	b.n	8001590 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e004      	b.n	8001590 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
 800158a:	e001      	b.n	8001590 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000008 	.word	0x20000008
 80015cc:	20000268 	.word	0x20000268

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000268 	.word	0x20000268

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008

08001630 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	609a      	str	r2, [r3, #8]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3360      	adds	r3, #96	@ 0x60
 80016aa:	461a      	mov	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <LL_ADC_SetOffset+0x44>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	4313      	orrs	r3, r2
 80016c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016d0:	bf00      	nop
 80016d2:	371c      	adds	r7, #28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	03fff000 	.word	0x03fff000

080016e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3360      	adds	r3, #96	@ 0x60
 80016ee:	461a      	mov	r2, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3360      	adds	r3, #96	@ 0x60
 800171c:	461a      	mov	r2, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	431a      	orrs	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001768:	b480      	push	{r7}
 800176a:	b087      	sub	sp, #28
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3330      	adds	r3, #48	@ 0x30
 8001778:	461a      	mov	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	4413      	add	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	211f      	movs	r1, #31
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	401a      	ands	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	0e9b      	lsrs	r3, r3, #26
 80017a0:	f003 011f 	and.w	r1, r3, #31
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	431a      	orrs	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017b4:	bf00      	nop
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3314      	adds	r3, #20
 80017d0:	461a      	mov	r2, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	0e5b      	lsrs	r3, r3, #25
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	4413      	add	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	0d1b      	lsrs	r3, r3, #20
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	2107      	movs	r1, #7
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	401a      	ands	r2, r3
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	0d1b      	lsrs	r3, r3, #20
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	431a      	orrs	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800180a:	bf00      	nop
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001830:	43db      	mvns	r3, r3
 8001832:	401a      	ands	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0318 	and.w	r3, r3, #24
 800183a:	4908      	ldr	r1, [pc, #32]	@ (800185c <LL_ADC_SetChannelSingleDiff+0x44>)
 800183c:	40d9      	lsrs	r1, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	400b      	ands	r3, r1
 8001842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001846:	431a      	orrs	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	0007ffff 	.word	0x0007ffff

08001860 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 031f 	and.w	r3, r3, #31
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80018a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6093      	str	r3, [r2, #8]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018d0:	d101      	bne.n	80018d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80018f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001920:	d101      	bne.n	8001926 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001944:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001948:	f043 0201 	orr.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <LL_ADC_IsEnabled+0x18>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <LL_ADC_IsEnabled+0x1a>
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001992:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001996:	f043 0204 	orr.w	r2, r3, #4
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d101      	bne.n	80019c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d101      	bne.n	80019e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e130      	b.n	8001c74 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fb01 	bl	8001028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff3f 	bl	80018bc <LL_ADC_IsDeepPowerDownEnabled>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff25 	bl	8001898 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff5a 	bl	800190c <LL_ADC_IsInternalRegulatorEnabled>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d115      	bne.n	8001a8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff ff3e 	bl	80018e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a68:	4b84      	ldr	r3, [pc, #528]	@ (8001c7c <HAL_ADC_Init+0x284>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	4a84      	ldr	r2, [pc, #528]	@ (8001c80 <HAL_ADC_Init+0x288>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	099b      	lsrs	r3, r3, #6
 8001a76:	3301      	adds	r3, #1
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a7c:	e002      	b.n	8001a84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff3c 	bl	800190c <LL_ADC_IsInternalRegulatorEnabled>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9e:	f043 0210 	orr.w	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aaa:	f043 0201 	orr.w	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ff75 	bl	80019aa <LL_ADC_REG_IsConversionOngoing>
 8001ac0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 80c9 	bne.w	8001c62 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 80c5 	bne.w	8001c62 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001adc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ae0:	f043 0202 	orr.w	r2, r3, #2
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff35 	bl	800195c <LL_ADC_IsEnabled>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d115      	bne.n	8001b24 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001af8:	4862      	ldr	r0, [pc, #392]	@ (8001c84 <HAL_ADC_Init+0x28c>)
 8001afa:	f7ff ff2f 	bl	800195c <LL_ADC_IsEnabled>
 8001afe:	4604      	mov	r4, r0
 8001b00:	4861      	ldr	r0, [pc, #388]	@ (8001c88 <HAL_ADC_Init+0x290>)
 8001b02:	f7ff ff2b 	bl	800195c <LL_ADC_IsEnabled>
 8001b06:	4603      	mov	r3, r0
 8001b08:	431c      	orrs	r4, r3
 8001b0a:	4860      	ldr	r0, [pc, #384]	@ (8001c8c <HAL_ADC_Init+0x294>)
 8001b0c:	f7ff ff26 	bl	800195c <LL_ADC_IsEnabled>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4323      	orrs	r3, r4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	485c      	ldr	r0, [pc, #368]	@ (8001c90 <HAL_ADC_Init+0x298>)
 8001b20:	f7ff fd86 	bl	8001630 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7e5b      	ldrb	r3, [r3, #25]
 8001b28:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b2e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b34:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b3a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b42:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d106      	bne.n	8001b60 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	3b01      	subs	r3, #1
 8001b58:	045b      	lsls	r3, r3, #17
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d009      	beq.n	8001b7c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b74:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	4b44      	ldr	r3, [pc, #272]	@ (8001c94 <HAL_ADC_Init+0x29c>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	69b9      	ldr	r1, [r7, #24]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff1b 	bl	80019d0 <LL_ADC_INJ_IsConversionOngoing>
 8001b9a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d13d      	bne.n	8001c1e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d13a      	bne.n	8001c1e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bac:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bb4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001bc4:	f023 0302 	bic.w	r3, r3, #2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	69b9      	ldr	r1, [r7, #24]
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d118      	bne.n	8001c0e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001be6:	f023 0304 	bic.w	r3, r3, #4
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001bf8:	4311      	orrs	r1, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	611a      	str	r2, [r3, #16]
 8001c0c:	e007      	b.n	8001c1e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0201 	bic.w	r2, r2, #1
 8001c1c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d10c      	bne.n	8001c40 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2c:	f023 010f 	bic.w	r1, r3, #15
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	1e5a      	subs	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c3e:	e007      	b.n	8001c50 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 020f 	bic.w	r2, r2, #15
 8001c4e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c54:	f023 0303 	bic.w	r3, r3, #3
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c60:	e007      	b.n	8001c72 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c72:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3724      	adds	r7, #36	@ 0x24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd90      	pop	{r4, r7, pc}
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	053e2d63 	.word	0x053e2d63
 8001c84:	50040000 	.word	0x50040000
 8001c88:	50040100 	.word	0x50040100
 8001c8c:	50040200 	.word	0x50040200
 8001c90:	50040300 	.word	0x50040300
 8001c94:	fff0c007 	.word	0xfff0c007

08001c98 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ca0:	4857      	ldr	r0, [pc, #348]	@ (8001e00 <HAL_ADC_Start+0x168>)
 8001ca2:	f7ff fddd 	bl	8001860 <LL_ADC_GetMultimode>
 8001ca6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fe7c 	bl	80019aa <LL_ADC_REG_IsConversionOngoing>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f040 809c 	bne.w	8001df2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_ADC_Start+0x30>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e097      	b.n	8001df8 <HAL_ADC_Start+0x160>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fd73 	bl	80027bc <ADC_Enable>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 8083 	bne.w	8001de8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a42      	ldr	r2, [pc, #264]	@ (8001e04 <HAL_ADC_Start+0x16c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d002      	beq.n	8001d06 <HAL_ADC_Start+0x6e>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	e000      	b.n	8001d08 <HAL_ADC_Start+0x70>
 8001d06:	4b40      	ldr	r3, [pc, #256]	@ (8001e08 <HAL_ADC_Start+0x170>)
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d002      	beq.n	8001d16 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d105      	bne.n	8001d22 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d2e:	d106      	bne.n	8001d3e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	f023 0206 	bic.w	r2, r3, #6
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d3c:	e002      	b.n	8001d44 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	221c      	movs	r2, #28
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a2a      	ldr	r2, [pc, #168]	@ (8001e04 <HAL_ADC_Start+0x16c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d002      	beq.n	8001d64 <HAL_ADC_Start+0xcc>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	e000      	b.n	8001d66 <HAL_ADC_Start+0xce>
 8001d64:	4b28      	ldr	r3, [pc, #160]	@ (8001e08 <HAL_ADC_Start+0x170>)
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d008      	beq.n	8001d80 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d002      	beq.n	8001d80 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b09      	cmp	r3, #9
 8001d7e:	d114      	bne.n	8001daa <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d92:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d96:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fded 	bl	8001982 <LL_ADC_REG_StartConversion>
 8001da8:	e025      	b.n	8001df6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a12      	ldr	r2, [pc, #72]	@ (8001e04 <HAL_ADC_Start+0x16c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d002      	beq.n	8001dc6 <HAL_ADC_Start+0x12e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	e000      	b.n	8001dc8 <HAL_ADC_Start+0x130>
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HAL_ADC_Start+0x170>)
 8001dc8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00f      	beq.n	8001df6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dda:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dde:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001de6:	e006      	b.n	8001df6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001df0:	e001      	b.n	8001df6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	50040300 	.word	0x50040300
 8001e04:	50040100 	.word	0x50040100
 8001e08:	50040000 	.word	0x50040000

08001e0c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e16:	4866      	ldr	r0, [pc, #408]	@ (8001fb0 <HAL_ADC_PollForConversion+0x1a4>)
 8001e18:	f7ff fd22 	bl	8001860 <LL_ADC_GetMultimode>
 8001e1c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d102      	bne.n	8001e2c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e26:	2308      	movs	r3, #8
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e02a      	b.n	8001e82 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d002      	beq.n	8001e3e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b09      	cmp	r3, #9
 8001e3c:	d111      	bne.n	8001e62 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d007      	beq.n	8001e5c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e50:	f043 0220 	orr.w	r2, r3, #32
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0a4      	b.n	8001fa6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e60:	e00f      	b.n	8001e82 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e62:	4853      	ldr	r0, [pc, #332]	@ (8001fb0 <HAL_ADC_PollForConversion+0x1a4>)
 8001e64:	f7ff fd0a 	bl	800187c <LL_ADC_GetMultiDMATransfer>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e72:	f043 0220 	orr.w	r2, r3, #32
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e093      	b.n	8001fa6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e7e:	2304      	movs	r3, #4
 8001e80:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e82:	f7ff fba5 	bl	80015d0 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e88:	e021      	b.n	8001ece <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e90:	d01d      	beq.n	8001ece <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e92:	f7ff fb9d 	bl	80015d0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d302      	bcc.n	8001ea8 <HAL_ADC_PollForConversion+0x9c>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d112      	bne.n	8001ece <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10b      	bne.n	8001ece <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eba:	f043 0204 	orr.w	r2, r3, #4
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e06b      	b.n	8001fa6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0d6      	beq.n	8001e8a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fc28 	bl	8001742 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01c      	beq.n	8001f32 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7e5b      	ldrb	r3, [r3, #25]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d118      	bne.n	8001f32 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d111      	bne.n	8001f32 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f12:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb4 <HAL_ADC_PollForConversion+0x1a8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d002      	beq.n	8001f42 <HAL_ADC_PollForConversion+0x136>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	e000      	b.n	8001f44 <HAL_ADC_PollForConversion+0x138>
 8001f42:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb8 <HAL_ADC_PollForConversion+0x1ac>)
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d008      	beq.n	8001f5e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d002      	beq.n	8001f5e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b09      	cmp	r3, #9
 8001f5c:	d104      	bne.n	8001f68 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	e00c      	b.n	8001f82 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a11      	ldr	r2, [pc, #68]	@ (8001fb4 <HAL_ADC_PollForConversion+0x1a8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d002      	beq.n	8001f78 <HAL_ADC_PollForConversion+0x16c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	e000      	b.n	8001f7a <HAL_ADC_PollForConversion+0x16e>
 8001f78:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <HAL_ADC_PollForConversion+0x1ac>)
 8001f7a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d104      	bne.n	8001f92 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e008      	b.n	8001fa4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d103      	bne.n	8001fa4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	220c      	movs	r2, #12
 8001fa2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	50040300 	.word	0x50040300
 8001fb4:	50040100 	.word	0x50040100
 8001fb8:	50040000 	.word	0x50040000

08001fbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b0b6      	sub	sp, #216	@ 0xd8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x22>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e3c9      	b.n	800278e <HAL_ADC_ConfigChannel+0x7b6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fccf 	bl	80019aa <LL_ADC_REG_IsConversionOngoing>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	f040 83aa 	bne.w	8002768 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d824      	bhi.n	800206e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	3b02      	subs	r3, #2
 800202a:	2b03      	cmp	r3, #3
 800202c:	d81b      	bhi.n	8002066 <HAL_ADC_ConfigChannel+0x8e>
 800202e:	a201      	add	r2, pc, #4	@ (adr r2, 8002034 <HAL_ADC_ConfigChannel+0x5c>)
 8002030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002034:	08002045 	.word	0x08002045
 8002038:	0800204d 	.word	0x0800204d
 800203c:	08002055 	.word	0x08002055
 8002040:	0800205d 	.word	0x0800205d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002044:	230c      	movs	r3, #12
 8002046:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800204a:	e010      	b.n	800206e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800204c:	2312      	movs	r3, #18
 800204e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002052:	e00c      	b.n	800206e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002054:	2318      	movs	r3, #24
 8002056:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800205a:	e008      	b.n	800206e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800205c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002064:	e003      	b.n	800206e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002066:	2306      	movs	r3, #6
 8002068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800206c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800207c:	f7ff fb74 	bl	8001768 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fc90 	bl	80019aa <LL_ADC_REG_IsConversionOngoing>
 800208a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fc9c 	bl	80019d0 <LL_ADC_INJ_IsConversionOngoing>
 8002098:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800209c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f040 81a4 	bne.w	80023ee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 819f 	bne.w	80023ee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6819      	ldr	r1, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	461a      	mov	r2, r3
 80020be:	f7ff fb7f 	bl	80017c0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	08db      	lsrs	r3, r3, #3
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d00a      	beq.n	80020fa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6919      	ldr	r1, [r3, #16]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020f4:	f7ff fad0 	bl	8001698 <LL_ADC_SetOffset>
 80020f8:	e179      	b.n	80023ee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff faed 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 8002106:	4603      	mov	r3, r0
 8002108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x14e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fae2 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 800211c:	4603      	mov	r3, r0
 800211e:	0e9b      	lsrs	r3, r3, #26
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	e01e      	b.n	8002164 <HAL_ADC_ConfigChannel+0x18c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fad7 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002144:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002148:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800214c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e004      	b.n	8002162 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002158:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216c:	2b00      	cmp	r3, #0
 800216e:	d105      	bne.n	800217c <HAL_ADC_ConfigChannel+0x1a4>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	0e9b      	lsrs	r3, r3, #26
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	e018      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1d6>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002190:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002198:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80021a0:	2320      	movs	r3, #32
 80021a2:	e004      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80021a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d106      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff faa6 	bl	800170c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2101      	movs	r1, #1
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fa8a 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10a      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x214>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2101      	movs	r1, #1
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fa7f 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	0e9b      	lsrs	r3, r3, #26
 80021e6:	f003 021f 	and.w	r2, r3, #31
 80021ea:	e01e      	b.n	800222a <HAL_ADC_ConfigChannel+0x252>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fa74 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800220a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800220e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e004      	b.n	8002228 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800221e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002232:	2b00      	cmp	r3, #0
 8002234:	d105      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x26a>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	e018      	b.n	8002274 <HAL_ADC_ConfigChannel+0x29c>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002256:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800225a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800225e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002266:	2320      	movs	r3, #32
 8002268:	e004      	b.n	8002274 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800226a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002274:	429a      	cmp	r2, r3
 8002276:	d106      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2200      	movs	r2, #0
 800227e:	2101      	movs	r1, #1
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fa43 	bl	800170c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2102      	movs	r1, #2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fa27 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10a      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x2da>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2102      	movs	r1, #2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fa1c 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	0e9b      	lsrs	r3, r3, #26
 80022ac:	f003 021f 	and.w	r2, r3, #31
 80022b0:	e01e      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x318>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2102      	movs	r1, #2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fa11 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 80022be:	4603      	mov	r3, r0
 80022c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80022d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80022d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80022e0:	2320      	movs	r3, #32
 80022e2:	e004      	b.n	80022ee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80022e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x330>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0e9b      	lsrs	r3, r3, #26
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	e014      	b.n	8002332 <HAL_ADC_ConfigChannel+0x35a>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002316:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800231c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e004      	b.n	8002332 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002328:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002332:	429a      	cmp	r2, r3
 8002334:	d106      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2200      	movs	r2, #0
 800233c:	2102      	movs	r1, #2
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff f9e4 	bl	800170c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2103      	movs	r1, #3
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff f9c8 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x398>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2103      	movs	r1, #3
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff f9bd 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	f003 021f 	and.w	r2, r3, #31
 800236e:	e017      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x3c8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2103      	movs	r1, #3
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f9b2 	bl	80016e0 <LL_ADC_GetOffsetChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800238a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800238c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002392:	2320      	movs	r3, #32
 8002394:	e003      	b.n	800239e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x3e0>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	e011      	b.n	80023dc <HAL_ADC_ConfigChannel+0x404>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80023c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80023ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80023d0:	2320      	movs	r3, #32
 80023d2:	e003      	b.n	80023dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80023d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023dc:	429a      	cmp	r2, r3
 80023de:	d106      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2200      	movs	r2, #0
 80023e6:	2103      	movs	r1, #3
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff f98f 	bl	800170c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fab2 	bl	800195c <LL_ADC_IsEnabled>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 8140 	bne.w	8002680 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6819      	ldr	r1, [r3, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	461a      	mov	r2, r3
 800240e:	f7ff fa03 	bl	8001818 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	4a8f      	ldr	r2, [pc, #572]	@ (8002654 <HAL_ADC_ConfigChannel+0x67c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	f040 8131 	bne.w	8002680 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10b      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x46e>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	0e9b      	lsrs	r3, r3, #26
 8002434:	3301      	adds	r3, #1
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2b09      	cmp	r3, #9
 800243c:	bf94      	ite	ls
 800243e:	2301      	movls	r3, #1
 8002440:	2300      	movhi	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	e019      	b.n	800247a <HAL_ADC_ConfigChannel+0x4a2>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002456:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800245e:	2320      	movs	r3, #32
 8002460:	e003      	b.n	800246a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	2b09      	cmp	r3, #9
 8002472:	bf94      	ite	ls
 8002474:	2301      	movls	r3, #1
 8002476:	2300      	movhi	r3, #0
 8002478:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800247a:	2b00      	cmp	r3, #0
 800247c:	d079      	beq.n	8002572 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002486:	2b00      	cmp	r3, #0
 8002488:	d107      	bne.n	800249a <HAL_ADC_ConfigChannel+0x4c2>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0e9b      	lsrs	r3, r3, #26
 8002490:	3301      	adds	r3, #1
 8002492:	069b      	lsls	r3, r3, #26
 8002494:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002498:	e015      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x4ee>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80024a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024aa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80024ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80024b2:	2320      	movs	r3, #32
 80024b4:	e003      	b.n	80024be <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80024b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	3301      	adds	r3, #1
 80024c0:	069b      	lsls	r3, r3, #26
 80024c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x50e>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	0e9b      	lsrs	r3, r3, #26
 80024d8:	3301      	adds	r3, #1
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	2101      	movs	r1, #1
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	e017      	b.n	8002516 <HAL_ADC_ConfigChannel+0x53e>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80024fe:	2320      	movs	r3, #32
 8002500:	e003      	b.n	800250a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	3301      	adds	r3, #1
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	2101      	movs	r1, #1
 8002512:	fa01 f303 	lsl.w	r3, r1, r3
 8002516:	ea42 0103 	orr.w	r1, r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10a      	bne.n	800253c <HAL_ADC_ConfigChannel+0x564>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	3301      	adds	r3, #1
 800252e:	f003 021f 	and.w	r2, r3, #31
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	051b      	lsls	r3, r3, #20
 800253a:	e018      	b.n	800256e <HAL_ADC_ConfigChannel+0x596>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800254a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800254e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e003      	b.n	8002560 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f003 021f 	and.w	r2, r3, #31
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800256e:	430b      	orrs	r3, r1
 8002570:	e081      	b.n	8002676 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257a:	2b00      	cmp	r3, #0
 800257c:	d107      	bne.n	800258e <HAL_ADC_ConfigChannel+0x5b6>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	0e9b      	lsrs	r3, r3, #26
 8002584:	3301      	adds	r3, #1
 8002586:	069b      	lsls	r3, r3, #26
 8002588:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800258c:	e015      	b.n	80025ba <HAL_ADC_ConfigChannel+0x5e2>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80025a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80025a6:	2320      	movs	r3, #32
 80025a8:	e003      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80025aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	069b      	lsls	r3, r3, #26
 80025b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_ADC_ConfigChannel+0x602>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	0e9b      	lsrs	r3, r3, #26
 80025cc:	3301      	adds	r3, #1
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	e017      	b.n	800260a <HAL_ADC_ConfigChannel+0x632>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	61bb      	str	r3, [r7, #24]
  return result;
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80025f2:	2320      	movs	r3, #32
 80025f4:	e003      	b.n	80025fe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	ea42 0103 	orr.w	r1, r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10d      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x65e>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	0e9b      	lsrs	r3, r3, #26
 8002620:	3301      	adds	r3, #1
 8002622:	f003 021f 	and.w	r2, r3, #31
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	3b1e      	subs	r3, #30
 800262e:	051b      	lsls	r3, r3, #20
 8002630:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002634:	e01e      	b.n	8002674 <HAL_ADC_ConfigChannel+0x69c>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	60fb      	str	r3, [r7, #12]
  return result;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d104      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800264e:	2320      	movs	r3, #32
 8002650:	e006      	b.n	8002660 <HAL_ADC_ConfigChannel+0x688>
 8002652:	bf00      	nop
 8002654:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	f003 021f 	and.w	r2, r3, #31
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	3b1e      	subs	r3, #30
 800266e:	051b      	lsls	r3, r3, #20
 8002670:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002674:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800267a:	4619      	mov	r1, r3
 800267c:	f7ff f8a0 	bl	80017c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b44      	ldr	r3, [pc, #272]	@ (8002798 <HAL_ADC_ConfigChannel+0x7c0>)
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d07a      	beq.n	8002782 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800268c:	4843      	ldr	r0, [pc, #268]	@ (800279c <HAL_ADC_ConfigChannel+0x7c4>)
 800268e:	f7fe fff5 	bl	800167c <LL_ADC_GetCommonPathInternalCh>
 8002692:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a41      	ldr	r2, [pc, #260]	@ (80027a0 <HAL_ADC_ConfigChannel+0x7c8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d12c      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d126      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a3c      	ldr	r2, [pc, #240]	@ (80027a4 <HAL_ADC_ConfigChannel+0x7cc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d004      	beq.n	80026c0 <HAL_ADC_ConfigChannel+0x6e8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3b      	ldr	r2, [pc, #236]	@ (80027a8 <HAL_ADC_ConfigChannel+0x7d0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d15d      	bne.n	800277c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026c8:	4619      	mov	r1, r3
 80026ca:	4834      	ldr	r0, [pc, #208]	@ (800279c <HAL_ADC_ConfigChannel+0x7c4>)
 80026cc:	f7fe ffc3 	bl	8001656 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026d0:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <HAL_ADC_ConfigChannel+0x7d4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	4a36      	ldr	r2, [pc, #216]	@ (80027b0 <HAL_ADC_ConfigChannel+0x7d8>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026ea:	e002      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f9      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f8:	e040      	b.n	800277c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a2d      	ldr	r2, [pc, #180]	@ (80027b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d118      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002708:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d112      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a23      	ldr	r2, [pc, #140]	@ (80027a4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_ADC_ConfigChannel+0x74c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a22      	ldr	r2, [pc, #136]	@ (80027a8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d12d      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002724:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002728:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800272c:	4619      	mov	r1, r3
 800272e:	481b      	ldr	r0, [pc, #108]	@ (800279c <HAL_ADC_ConfigChannel+0x7c4>)
 8002730:	f7fe ff91 	bl	8001656 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002734:	e024      	b.n	8002780 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1f      	ldr	r2, [pc, #124]	@ (80027b8 <HAL_ADC_ConfigChannel+0x7e0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d120      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002740:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d11a      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a14      	ldr	r2, [pc, #80]	@ (80027a4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d115      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002756:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800275a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800275e:	4619      	mov	r1, r3
 8002760:	480e      	ldr	r0, [pc, #56]	@ (800279c <HAL_ADC_ConfigChannel+0x7c4>)
 8002762:	f7fe ff78 	bl	8001656 <LL_ADC_SetCommonPathInternalCh>
 8002766:	e00c      	b.n	8002782 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276c:	f043 0220 	orr.w	r2, r3, #32
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800277a:	e002      	b.n	8002782 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800277c:	bf00      	nop
 800277e:	e000      	b.n	8002782 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002780:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800278a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800278e:	4618      	mov	r0, r3
 8002790:	37d8      	adds	r7, #216	@ 0xd8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	80080000 	.word	0x80080000
 800279c:	50040300 	.word	0x50040300
 80027a0:	c7520000 	.word	0xc7520000
 80027a4:	50040000 	.word	0x50040000
 80027a8:	50040200 	.word	0x50040200
 80027ac:	20000000 	.word	0x20000000
 80027b0:	053e2d63 	.word	0x053e2d63
 80027b4:	cb840000 	.word	0xcb840000
 80027b8:	80000001 	.word	0x80000001

080027bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff f8c5 	bl	800195c <LL_ADC_IsEnabled>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d169      	bne.n	80028ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	4b36      	ldr	r3, [pc, #216]	@ (80028b8 <ADC_Enable+0xfc>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ea:	f043 0210 	orr.w	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	f043 0201 	orr.w	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e055      	b.n	80028ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff f894 	bl	8001934 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800280c:	482b      	ldr	r0, [pc, #172]	@ (80028bc <ADC_Enable+0x100>)
 800280e:	f7fe ff35 	bl	800167c <LL_ADC_GetCommonPathInternalCh>
 8002812:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800281c:	4b28      	ldr	r3, [pc, #160]	@ (80028c0 <ADC_Enable+0x104>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	4a28      	ldr	r2, [pc, #160]	@ (80028c4 <ADC_Enable+0x108>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002836:	e002      	b.n	800283e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	3b01      	subs	r3, #1
 800283c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f9      	bne.n	8002838 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002844:	f7fe fec4 	bl	80015d0 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800284a:	e028      	b.n	800289e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff f883 	bl	800195c <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d104      	bne.n	8002866 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff f867 	bl	8001934 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002866:	f7fe feb3 	bl	80015d0 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d914      	bls.n	800289e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b01      	cmp	r3, #1
 8002880:	d00d      	beq.n	800289e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002886:	f043 0210 	orr.w	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e007      	b.n	80028ae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d1cf      	bne.n	800284c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	8000003f 	.word	0x8000003f
 80028bc:	50040300 	.word	0x50040300
 80028c0:	20000000 	.word	0x20000000
 80028c4:	053e2d63 	.word	0x053e2d63

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4907      	ldr	r1, [pc, #28]	@ (8002964 <__NVIC_EnableIRQ+0x38>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000e100 	.word	0xe000e100

08002968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	2b00      	cmp	r3, #0
 800297a:	db0a      	blt.n	8002992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	490c      	ldr	r1, [pc, #48]	@ (80029b4 <__NVIC_SetPriority+0x4c>)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	0112      	lsls	r2, r2, #4
 8002988:	b2d2      	uxtb	r2, r2
 800298a:	440b      	add	r3, r1
 800298c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002990:	e00a      	b.n	80029a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4908      	ldr	r1, [pc, #32]	@ (80029b8 <__NVIC_SetPriority+0x50>)
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3b04      	subs	r3, #4
 80029a0:	0112      	lsls	r2, r2, #4
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	440b      	add	r3, r1
 80029a6:	761a      	strb	r2, [r3, #24]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000e100 	.word	0xe000e100
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	@ 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f1c3 0307 	rsb	r3, r3, #7
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	bf28      	it	cs
 80029da:	2304      	movcs	r3, #4
 80029dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2b06      	cmp	r3, #6
 80029e4:	d902      	bls.n	80029ec <NVIC_EncodePriority+0x30>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3b03      	subs	r3, #3
 80029ea:	e000      	b.n	80029ee <NVIC_EncodePriority+0x32>
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	f04f 32ff 	mov.w	r2, #4294967295
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	401a      	ands	r2, r3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a04:	f04f 31ff 	mov.w	r1, #4294967295
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	43d9      	mvns	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a14:	4313      	orrs	r3, r2
         );
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3724      	adds	r7, #36	@ 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a34:	d301      	bcc.n	8002a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00f      	b.n	8002a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a64 <SysTick_Config+0x40>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a42:	210f      	movs	r1, #15
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f7ff ff8e 	bl	8002968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <SysTick_Config+0x40>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <SysTick_Config+0x40>)
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff29 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a90:	f7ff ff3e 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	6978      	ldr	r0, [r7, #20]
 8002a9c:	f7ff ff8e 	bl	80029bc <NVIC_EncodePriority>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff5d 	bl	8002968 <__NVIC_SetPriority>
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff31 	bl	800292c <__NVIC_EnableIRQ>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffa2 	bl	8002a24 <SysTick_Config>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002afa:	e17f      	b.n	8002dfc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8171 	beq.w	8002df6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d005      	beq.n	8002b2c <HAL_GPIO_Init+0x40>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d130      	bne.n	8002b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b62:	2201      	movs	r2, #1
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 0201 	and.w	r2, r3, #1
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d118      	bne.n	8002bcc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	08db      	lsrs	r3, r3, #3
 8002bb6:	f003 0201 	and.w	r2, r3, #1
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d017      	beq.n	8002c08 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	2203      	movs	r2, #3
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d123      	bne.n	8002c5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	08da      	lsrs	r2, r3, #3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3208      	adds	r2, #8
 8002c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	08da      	lsrs	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3208      	adds	r2, #8
 8002c56:	6939      	ldr	r1, [r7, #16]
 8002c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	2203      	movs	r2, #3
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0203 	and.w	r2, r3, #3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80ac 	beq.w	8002df6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8002e1c <HAL_GPIO_Init+0x330>)
 8002ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca2:	4a5e      	ldr	r2, [pc, #376]	@ (8002e1c <HAL_GPIO_Init+0x330>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002caa:	4b5c      	ldr	r3, [pc, #368]	@ (8002e1c <HAL_GPIO_Init+0x330>)
 8002cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cb6:	4a5a      	ldr	r2, [pc, #360]	@ (8002e20 <HAL_GPIO_Init+0x334>)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ce0:	d025      	beq.n	8002d2e <HAL_GPIO_Init+0x242>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4f      	ldr	r2, [pc, #316]	@ (8002e24 <HAL_GPIO_Init+0x338>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01f      	beq.n	8002d2a <HAL_GPIO_Init+0x23e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a4e      	ldr	r2, [pc, #312]	@ (8002e28 <HAL_GPIO_Init+0x33c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d019      	beq.n	8002d26 <HAL_GPIO_Init+0x23a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4d      	ldr	r2, [pc, #308]	@ (8002e2c <HAL_GPIO_Init+0x340>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0x236>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a4c      	ldr	r2, [pc, #304]	@ (8002e30 <HAL_GPIO_Init+0x344>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00d      	beq.n	8002d1e <HAL_GPIO_Init+0x232>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a4b      	ldr	r2, [pc, #300]	@ (8002e34 <HAL_GPIO_Init+0x348>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <HAL_GPIO_Init+0x22e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8002e38 <HAL_GPIO_Init+0x34c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_GPIO_Init+0x22a>
 8002d12:	2306      	movs	r3, #6
 8002d14:	e00c      	b.n	8002d30 <HAL_GPIO_Init+0x244>
 8002d16:	2307      	movs	r3, #7
 8002d18:	e00a      	b.n	8002d30 <HAL_GPIO_Init+0x244>
 8002d1a:	2305      	movs	r3, #5
 8002d1c:	e008      	b.n	8002d30 <HAL_GPIO_Init+0x244>
 8002d1e:	2304      	movs	r3, #4
 8002d20:	e006      	b.n	8002d30 <HAL_GPIO_Init+0x244>
 8002d22:	2303      	movs	r3, #3
 8002d24:	e004      	b.n	8002d30 <HAL_GPIO_Init+0x244>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e002      	b.n	8002d30 <HAL_GPIO_Init+0x244>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <HAL_GPIO_Init+0x244>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	f002 0203 	and.w	r2, r2, #3
 8002d36:	0092      	lsls	r2, r2, #2
 8002d38:	4093      	lsls	r3, r2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d40:	4937      	ldr	r1, [pc, #220]	@ (8002e20 <HAL_GPIO_Init+0x334>)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	089b      	lsrs	r3, r3, #2
 8002d46:	3302      	adds	r3, #2
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e3c <HAL_GPIO_Init+0x350>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d72:	4a32      	ldr	r2, [pc, #200]	@ (8002e3c <HAL_GPIO_Init+0x350>)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d78:	4b30      	ldr	r3, [pc, #192]	@ (8002e3c <HAL_GPIO_Init+0x350>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d9c:	4a27      	ldr	r2, [pc, #156]	@ (8002e3c <HAL_GPIO_Init+0x350>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002da2:	4b26      	ldr	r3, [pc, #152]	@ (8002e3c <HAL_GPIO_Init+0x350>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e3c <HAL_GPIO_Init+0x350>)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <HAL_GPIO_Init+0x350>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002df0:	4a12      	ldr	r2, [pc, #72]	@ (8002e3c <HAL_GPIO_Init+0x350>)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fa22 f303 	lsr.w	r3, r2, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f47f ae78 	bne.w	8002afc <HAL_GPIO_Init+0x10>
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	371c      	adds	r7, #28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40010000 	.word	0x40010000
 8002e24:	48000400 	.word	0x48000400
 8002e28:	48000800 	.word	0x48000800
 8002e2c:	48000c00 	.word	0x48000c00
 8002e30:	48001000 	.word	0x48001000
 8002e34:	48001400 	.word	0x48001400
 8002e38:	48001800 	.word	0x48001800
 8002e3c:	40010400 	.word	0x40010400

08002e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e50:	787b      	ldrb	r3, [r7, #1]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e5e:	887a      	ldrh	r2, [r7, #2]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e82:	887a      	ldrh	r2, [r7, #2]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4013      	ands	r3, r2
 8002e88:	041a      	lsls	r2, r3, #16
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43d9      	mvns	r1, r3
 8002e8e:	887b      	ldrh	r3, [r7, #2]
 8002e90:	400b      	ands	r3, r1
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	619a      	str	r2, [r3, #24]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002eae:	4b08      	ldr	r3, [pc, #32]	@ (8002ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eba:	4a05      	ldr	r2, [pc, #20]	@ (8002ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe f838 	bl	8000f38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40010400 	.word	0x40010400

08002ed4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ed8:	4b04      	ldr	r3, [pc, #16]	@ (8002eec <HAL_PWREx_GetVoltageRange+0x18>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40007000 	.word	0x40007000

08002ef0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002efe:	d130      	bne.n	8002f62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f00:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f0c:	d038      	beq.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f0e:	4b20      	ldr	r3, [pc, #128]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f16:	4a1e      	ldr	r2, [pc, #120]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2232      	movs	r2, #50	@ 0x32
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	4a1b      	ldr	r2, [pc, #108]	@ (8002f98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0c9b      	lsrs	r3, r3, #18
 8002f30:	3301      	adds	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f34:	e002      	b.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f3c:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f48:	d102      	bne.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f2      	bne.n	8002f36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f50:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f5c:	d110      	bne.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e00f      	b.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f62:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6e:	d007      	beq.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f70:	4b07      	ldr	r3, [pc, #28]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f78:	4a05      	ldr	r2, [pc, #20]	@ (8002f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40007000 	.word	0x40007000
 8002f94:	20000000 	.word	0x20000000
 8002f98:	431bde83 	.word	0x431bde83

08002f9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e3ca      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fae:	4b97      	ldr	r3, [pc, #604]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb8:	4b94      	ldr	r3, [pc, #592]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80e4 	beq.w	8003198 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x4a>
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	f040 808b 	bne.w	80030f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	f040 8087 	bne.w	80030f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fe6:	4b89      	ldr	r3, [pc, #548]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x62>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e3a2      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1a      	ldr	r2, [r3, #32]
 8003002:	4b82      	ldr	r3, [pc, #520]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_RCC_OscConfig+0x7c>
 800300e:	4b7f      	ldr	r3, [pc, #508]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003016:	e005      	b.n	8003024 <HAL_RCC_OscConfig+0x88>
 8003018:	4b7c      	ldr	r3, [pc, #496]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003024:	4293      	cmp	r3, r2
 8003026:	d223      	bcs.n	8003070 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fd55 	bl	8003adc <RCC_SetFlashLatencyFromMSIRange>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e383      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303c:	4b73      	ldr	r3, [pc, #460]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a72      	ldr	r2, [pc, #456]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b70      	ldr	r3, [pc, #448]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	496d      	ldr	r1, [pc, #436]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305a:	4b6c      	ldr	r3, [pc, #432]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	4968      	ldr	r1, [pc, #416]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
 800306e:	e025      	b.n	80030bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003070:	4b66      	ldr	r3, [pc, #408]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a65      	ldr	r2, [pc, #404]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003076:	f043 0308 	orr.w	r3, r3, #8
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b63      	ldr	r3, [pc, #396]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4960      	ldr	r1, [pc, #384]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800308e:	4b5f      	ldr	r3, [pc, #380]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	495b      	ldr	r1, [pc, #364]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fd15 	bl	8003adc <RCC_SetFlashLatencyFromMSIRange>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e343      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030bc:	f000 fc4a 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b52      	ldr	r3, [pc, #328]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	4950      	ldr	r1, [pc, #320]	@ (8003210 <HAL_RCC_OscConfig+0x274>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
 80030d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003214 <HAL_RCC_OscConfig+0x278>)
 80030da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003218 <HAL_RCC_OscConfig+0x27c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fe fa25 	bl	8001530 <HAL_InitTick>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d052      	beq.n	8003196 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	e327      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d032      	beq.n	8003162 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030fc:	4b43      	ldr	r3, [pc, #268]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a42      	ldr	r2, [pc, #264]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003108:	f7fe fa62 	bl	80015d0 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003110:	f7fe fa5e 	bl	80015d0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e310      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003122:	4b3a      	ldr	r3, [pc, #232]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800312e:	4b37      	ldr	r3, [pc, #220]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a36      	ldr	r2, [pc, #216]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003134:	f043 0308 	orr.w	r3, r3, #8
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b34      	ldr	r3, [pc, #208]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	4931      	ldr	r1, [pc, #196]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800314c:	4b2f      	ldr	r3, [pc, #188]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	492c      	ldr	r1, [pc, #176]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
 8003160:	e01a      	b.n	8003198 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003162:	4b2a      	ldr	r3, [pc, #168]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a29      	ldr	r2, [pc, #164]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800316e:	f7fe fa2f 	bl	80015d0 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003176:	f7fe fa2b 	bl	80015d0 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e2dd      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003188:	4b20      	ldr	r3, [pc, #128]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x1da>
 8003194:	e000      	b.n	8003198 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003196:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d074      	beq.n	800328e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x21a>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d10e      	bne.n	80031ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d10b      	bne.n	80031ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b6:	4b15      	ldr	r3, [pc, #84]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d064      	beq.n	800328c <HAL_RCC_OscConfig+0x2f0>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d160      	bne.n	800328c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e2ba      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x24a>
 80031d8:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a0b      	ldr	r2, [pc, #44]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e026      	b.n	8003234 <HAL_RCC_OscConfig+0x298>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031ee:	d115      	bne.n	800321c <HAL_RCC_OscConfig+0x280>
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a05      	ldr	r2, [pc, #20]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b03      	ldr	r3, [pc, #12]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a02      	ldr	r2, [pc, #8]	@ (800320c <HAL_RCC_OscConfig+0x270>)
 8003202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	e014      	b.n	8003234 <HAL_RCC_OscConfig+0x298>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	08006890 	.word	0x08006890
 8003214:	20000000 	.word	0x20000000
 8003218:	20000004 	.word	0x20000004
 800321c:	4ba0      	ldr	r3, [pc, #640]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a9f      	ldr	r2, [pc, #636]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b9d      	ldr	r3, [pc, #628]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a9c      	ldr	r2, [pc, #624]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800322e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe f9c8 	bl	80015d0 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7fe f9c4 	bl	80015d0 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e276      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003256:	4b92      	ldr	r3, [pc, #584]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x2a8>
 8003262:	e014      	b.n	800328e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe f9b4 	bl	80015d0 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe f9b0 	bl	80015d0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	@ 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e262      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800327e:	4b88      	ldr	r3, [pc, #544]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x2d0>
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800328c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d060      	beq.n	800335c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d005      	beq.n	80032ac <HAL_RCC_OscConfig+0x310>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d119      	bne.n	80032da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d116      	bne.n	80032da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ac:	4b7c      	ldr	r3, [pc, #496]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_OscConfig+0x328>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e23f      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c4:	4b76      	ldr	r3, [pc, #472]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	4973      	ldr	r1, [pc, #460]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d8:	e040      	b.n	800335c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d023      	beq.n	800332a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e2:	4b6f      	ldr	r3, [pc, #444]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6e      	ldr	r2, [pc, #440]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ee:	f7fe f96f 	bl	80015d0 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f6:	f7fe f96b 	bl	80015d0 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e21d      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003308:	4b65      	ldr	r3, [pc, #404]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003314:	4b62      	ldr	r3, [pc, #392]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	061b      	lsls	r3, r3, #24
 8003322:	495f      	ldr	r1, [pc, #380]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
 8003328:	e018      	b.n	800335c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800332a:	4b5d      	ldr	r3, [pc, #372]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a5c      	ldr	r2, [pc, #368]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fe f94b 	bl	80015d0 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333e:	f7fe f947 	bl	80015d0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1f9      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003350:	4b53      	ldr	r3, [pc, #332]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f0      	bne.n	800333e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d03c      	beq.n	80033e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01c      	beq.n	80033aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003370:	4b4b      	ldr	r3, [pc, #300]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003372:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003376:	4a4a      	ldr	r2, [pc, #296]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fe f926 	bl	80015d0 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003388:	f7fe f922 	bl	80015d0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1d4      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800339a:	4b41      	ldr	r3, [pc, #260]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800339c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ef      	beq.n	8003388 <HAL_RCC_OscConfig+0x3ec>
 80033a8:	e01b      	b.n	80033e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033aa:	4b3d      	ldr	r3, [pc, #244]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80033ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b0:	4a3b      	ldr	r2, [pc, #236]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe f909 	bl	80015d0 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fe f905 	bl	80015d0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e1b7      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d4:	4b32      	ldr	r3, [pc, #200]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80033d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ef      	bne.n	80033c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80a6 	beq.w	800353c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f0:	2300      	movs	r3, #0
 80033f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033f4:	4b2a      	ldr	r3, [pc, #168]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b27      	ldr	r3, [pc, #156]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003404:	4a26      	ldr	r2, [pc, #152]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800340a:	6593      	str	r3, [r2, #88]	@ 0x58
 800340c:	4b24      	ldr	r3, [pc, #144]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003418:	2301      	movs	r3, #1
 800341a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341c:	4b21      	ldr	r3, [pc, #132]	@ (80034a4 <HAL_RCC_OscConfig+0x508>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d118      	bne.n	800345a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003428:	4b1e      	ldr	r3, [pc, #120]	@ (80034a4 <HAL_RCC_OscConfig+0x508>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <HAL_RCC_OscConfig+0x508>)
 800342e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003432:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003434:	f7fe f8cc 	bl	80015d0 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343c:	f7fe f8c8 	bl	80015d0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e17a      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <HAL_RCC_OscConfig+0x508>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d108      	bne.n	8003474 <HAL_RCC_OscConfig+0x4d8>
 8003462:	4b0f      	ldr	r3, [pc, #60]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003468:	4a0d      	ldr	r2, [pc, #52]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003472:	e029      	b.n	80034c8 <HAL_RCC_OscConfig+0x52c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b05      	cmp	r3, #5
 800347a:	d115      	bne.n	80034a8 <HAL_RCC_OscConfig+0x50c>
 800347c:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003482:	4a07      	ldr	r2, [pc, #28]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800348c:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003492:	4a03      	ldr	r2, [pc, #12]	@ (80034a0 <HAL_RCC_OscConfig+0x504>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800349c:	e014      	b.n	80034c8 <HAL_RCC_OscConfig+0x52c>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40007000 	.word	0x40007000
 80034a8:	4b9c      	ldr	r3, [pc, #624]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ae:	4a9b      	ldr	r2, [pc, #620]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034b8:	4b98      	ldr	r3, [pc, #608]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034be:	4a97      	ldr	r2, [pc, #604]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034c0:	f023 0304 	bic.w	r3, r3, #4
 80034c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d016      	beq.n	80034fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fe f87e 	bl	80015d0 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d6:	e00a      	b.n	80034ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fe f87a 	bl	80015d0 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e12a      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ee:	4b8b      	ldr	r3, [pc, #556]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0ed      	beq.n	80034d8 <HAL_RCC_OscConfig+0x53c>
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fe:	f7fe f867 	bl	80015d0 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003504:	e00a      	b.n	800351c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003506:	f7fe f863 	bl	80015d0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003514:	4293      	cmp	r3, r2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e113      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800351c:	4b7f      	ldr	r3, [pc, #508]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800351e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ed      	bne.n	8003506 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352a:	7ffb      	ldrb	r3, [r7, #31]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003530:	4b7a      	ldr	r3, [pc, #488]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003534:	4a79      	ldr	r2, [pc, #484]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800353a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80fe 	beq.w	8003742 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800354a:	2b02      	cmp	r3, #2
 800354c:	f040 80d0 	bne.w	80036f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003550:	4b72      	ldr	r3, [pc, #456]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 0203 	and.w	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	429a      	cmp	r2, r3
 8003562:	d130      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	3b01      	subs	r3, #1
 8003570:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d127      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003580:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d11f      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003590:	2a07      	cmp	r2, #7
 8003592:	bf14      	ite	ne
 8003594:	2201      	movne	r2, #1
 8003596:	2200      	moveq	r2, #0
 8003598:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800359a:	4293      	cmp	r3, r2
 800359c:	d113      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d109      	bne.n	80035c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	3b01      	subs	r3, #1
 80035c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d06e      	beq.n	80036a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d069      	beq.n	80036a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035cc:	4b53      	ldr	r3, [pc, #332]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035d8:	4b50      	ldr	r3, [pc, #320]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0ad      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035e8:	4b4c      	ldr	r3, [pc, #304]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a4b      	ldr	r2, [pc, #300]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80035ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035f4:	f7fd ffec 	bl	80015d0 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fc:	f7fd ffe8 	bl	80015d0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e09a      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800360e:	4b43      	ldr	r3, [pc, #268]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800361a:	4b40      	ldr	r3, [pc, #256]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	4b40      	ldr	r3, [pc, #256]	@ (8003720 <HAL_RCC_OscConfig+0x784>)
 8003620:	4013      	ands	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800362a:	3a01      	subs	r2, #1
 800362c:	0112      	lsls	r2, r2, #4
 800362e:	4311      	orrs	r1, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003634:	0212      	lsls	r2, r2, #8
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800363c:	0852      	lsrs	r2, r2, #1
 800363e:	3a01      	subs	r2, #1
 8003640:	0552      	lsls	r2, r2, #21
 8003642:	4311      	orrs	r1, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003648:	0852      	lsrs	r2, r2, #1
 800364a:	3a01      	subs	r2, #1
 800364c:	0652      	lsls	r2, r2, #25
 800364e:	4311      	orrs	r1, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003654:	0912      	lsrs	r2, r2, #4
 8003656:	0452      	lsls	r2, r2, #17
 8003658:	430a      	orrs	r2, r1
 800365a:	4930      	ldr	r1, [pc, #192]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800365c:	4313      	orrs	r3, r2
 800365e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003660:	4b2e      	ldr	r3, [pc, #184]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2d      	ldr	r2, [pc, #180]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800366a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800366c:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a2a      	ldr	r2, [pc, #168]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003678:	f7fd ffaa 	bl	80015d0 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003680:	f7fd ffa6 	bl	80015d0 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e058      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003692:	4b22      	ldr	r3, [pc, #136]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800369e:	e050      	b.n	8003742 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e04f      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a4:	4b1d      	ldr	r3, [pc, #116]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d148      	bne.n	8003742 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036b0:	4b1a      	ldr	r3, [pc, #104]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a19      	ldr	r2, [pc, #100]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036bc:	4b17      	ldr	r3, [pc, #92]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036c8:	f7fd ff82 	bl	80015d0 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fd ff7e 	bl	80015d0 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e030      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e2:	4b0e      	ldr	r3, [pc, #56]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x734>
 80036ee:	e028      	b.n	8003742 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d023      	beq.n	800373e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b09      	ldr	r3, [pc, #36]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a08      	ldr	r2, [pc, #32]	@ (800371c <HAL_RCC_OscConfig+0x780>)
 80036fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fd ff65 	bl	80015d0 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003708:	e00c      	b.n	8003724 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fd ff61 	bl	80015d0 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d905      	bls.n	8003724 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e013      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
 800371c:	40021000 	.word	0x40021000
 8003720:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003724:	4b09      	ldr	r3, [pc, #36]	@ (800374c <HAL_RCC_OscConfig+0x7b0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ec      	bne.n	800370a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003730:	4b06      	ldr	r3, [pc, #24]	@ (800374c <HAL_RCC_OscConfig+0x7b0>)
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	4905      	ldr	r1, [pc, #20]	@ (800374c <HAL_RCC_OscConfig+0x7b0>)
 8003736:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <HAL_RCC_OscConfig+0x7b4>)
 8003738:	4013      	ands	r3, r2
 800373a:	60cb      	str	r3, [r1, #12]
 800373c:	e001      	b.n	8003742 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	feeefffc 	.word	0xfeeefffc

08003754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0e7      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003768:	4b75      	ldr	r3, [pc, #468]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d910      	bls.n	8003798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b72      	ldr	r3, [pc, #456]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 0207 	bic.w	r2, r3, #7
 800377e:	4970      	ldr	r1, [pc, #448]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4313      	orrs	r3, r2
 8003784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003786:	4b6e      	ldr	r3, [pc, #440]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0cf      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d010      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d908      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b4:	4b63      	ldr	r3, [pc, #396]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4960      	ldr	r1, [pc, #384]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d04c      	beq.n	800386c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037da:	4b5a      	ldr	r3, [pc, #360]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d121      	bne.n	800382a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0a6      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f2:	4b54      	ldr	r3, [pc, #336]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d115      	bne.n	800382a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e09a      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800380a:	4b4e      	ldr	r3, [pc, #312]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e08e      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800381a:	4b4a      	ldr	r3, [pc, #296]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e086      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800382a:	4b46      	ldr	r3, [pc, #280]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4943      	ldr	r1, [pc, #268]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383c:	f7fd fec8 	bl	80015d0 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	e00a      	b.n	800385a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003844:	f7fd fec4 	bl	80015d0 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e06e      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	4b3a      	ldr	r3, [pc, #232]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 020c 	and.w	r2, r3, #12
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d1eb      	bne.n	8003844 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d010      	beq.n	800389a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	4b31      	ldr	r3, [pc, #196]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003884:	429a      	cmp	r2, r3
 8003886:	d208      	bcs.n	800389a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003888:	4b2e      	ldr	r3, [pc, #184]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	492b      	ldr	r1, [pc, #172]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389a:	4b29      	ldr	r3, [pc, #164]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d210      	bcs.n	80038ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a8:	4b25      	ldr	r3, [pc, #148]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 0207 	bic.w	r2, r3, #7
 80038b0:	4923      	ldr	r1, [pc, #140]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b8:	4b21      	ldr	r3, [pc, #132]	@ (8003940 <HAL_RCC_ClockConfig+0x1ec>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e036      	b.n	8003938 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4918      	ldr	r1, [pc, #96]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d009      	beq.n	8003908 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f4:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4910      	ldr	r1, [pc, #64]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003908:	f000 f824 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b0d      	ldr	r3, [pc, #52]	@ (8003944 <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	490b      	ldr	r1, [pc, #44]	@ (8003948 <HAL_RCC_ClockConfig+0x1f4>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
 8003924:	4a09      	ldr	r2, [pc, #36]	@ (800394c <HAL_RCC_ClockConfig+0x1f8>)
 8003926:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003928:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <HAL_RCC_ClockConfig+0x1fc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fd fdff 	bl	8001530 <HAL_InitTick>
 8003932:	4603      	mov	r3, r0
 8003934:	72fb      	strb	r3, [r7, #11]

  return status;
 8003936:	7afb      	ldrb	r3, [r7, #11]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40022000 	.word	0x40022000
 8003944:	40021000 	.word	0x40021000
 8003948:	08006890 	.word	0x08006890
 800394c:	20000000 	.word	0x20000000
 8003950:	20000004 	.word	0x20000004

08003954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003954:	b480      	push	{r7}
 8003956:	b089      	sub	sp, #36	@ 0x24
 8003958:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	2300      	movs	r3, #0
 8003960:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003962:	4b3e      	ldr	r3, [pc, #248]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800396c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x34>
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d121      	bne.n	80039c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d11e      	bne.n	80039c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003988:	4b34      	ldr	r3, [pc, #208]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003994:	4b31      	ldr	r3, [pc, #196]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399a:	0a1b      	lsrs	r3, r3, #8
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	e005      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039a4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10d      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039c4:	e00a      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d102      	bne.n	80039d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039cc:	4b25      	ldr	r3, [pc, #148]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	e004      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039d8:	4b23      	ldr	r3, [pc, #140]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x114>)
 80039da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d134      	bne.n	8003a4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039e2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d003      	beq.n	80039fa <HAL_RCC_GetSysClockFreq+0xa6>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d003      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0xac>
 80039f8:	e005      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x110>)
 80039fc:	617b      	str	r3, [r7, #20]
      break;
 80039fe:	e005      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a00:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a02:	617b      	str	r3, [r7, #20]
      break;
 8003a04:	e002      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	617b      	str	r3, [r7, #20]
      break;
 8003a0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a0c:	4b13      	ldr	r3, [pc, #76]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	3301      	adds	r3, #1
 8003a18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a1a:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	fb03 f202 	mul.w	r2, r3, r2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a32:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	0e5b      	lsrs	r3, r3, #25
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a4c:	69bb      	ldr	r3, [r7, #24]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3724      	adds	r7, #36	@ 0x24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	080068a8 	.word	0x080068a8
 8003a64:	00f42400 	.word	0x00f42400
 8003a68:	007a1200 	.word	0x007a1200

08003a6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a70:	4b03      	ldr	r3, [pc, #12]	@ (8003a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a72:	681b      	ldr	r3, [r3, #0]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000000 	.word	0x20000000

08003a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a88:	f7ff fff0 	bl	8003a6c <HAL_RCC_GetHCLKFreq>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	4b06      	ldr	r3, [pc, #24]	@ (8003aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	4904      	ldr	r1, [pc, #16]	@ (8003aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	080068a0 	.word	0x080068a0

08003ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ab4:	f7ff ffda 	bl	8003a6c <HAL_RCC_GetHCLKFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	0adb      	lsrs	r3, r3, #11
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4904      	ldr	r1, [pc, #16]	@ (8003ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	080068a0 	.word	0x080068a0

08003adc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003af4:	f7ff f9ee 	bl	8002ed4 <HAL_PWREx_GetVoltageRange>
 8003af8:	6178      	str	r0, [r7, #20]
 8003afa:	e014      	b.n	8003b26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b00:	4a24      	ldr	r2, [pc, #144]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b08:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b14:	f7ff f9de 	bl	8002ed4 <HAL_PWREx_GetVoltageRange>
 8003b18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b24:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b2c:	d10b      	bne.n	8003b46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b80      	cmp	r3, #128	@ 0x80
 8003b32:	d919      	bls.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b38:	d902      	bls.n	8003b40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	e013      	b.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b40:	2301      	movs	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e010      	b.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b80      	cmp	r3, #128	@ 0x80
 8003b4a:	d902      	bls.n	8003b52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	e00a      	b.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b80      	cmp	r3, #128	@ 0x80
 8003b56:	d102      	bne.n	8003b5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b58:	2302      	movs	r3, #2
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	e004      	b.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b70      	cmp	r3, #112	@ 0x70
 8003b62:	d101      	bne.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b64:	2301      	movs	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b68:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 0207 	bic.w	r2, r3, #7
 8003b70:	4909      	ldr	r1, [pc, #36]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b78:	4b07      	ldr	r3, [pc, #28]	@ (8003b98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d001      	beq.n	8003b8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40022000 	.word	0x40022000

08003b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ba8:	2300      	movs	r3, #0
 8003baa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d041      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bbc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bc0:	d02a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bc2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bc6:	d824      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bcc:	d008      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bd2:	d81e      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bdc:	d010      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bde:	e018      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003be0:	4b86      	ldr	r3, [pc, #536]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4a85      	ldr	r2, [pc, #532]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bec:	e015      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fabb 	bl	8004170 <RCCEx_PLLSAI1_Config>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bfe:	e00c      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3320      	adds	r3, #32
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fba6 	bl	8004358 <RCCEx_PLLSAI2_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c10:	e003      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	74fb      	strb	r3, [r7, #19]
      break;
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c20:	4b76      	ldr	r3, [pc, #472]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c2e:	4973      	ldr	r1, [pc, #460]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c36:	e001      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	7cfb      	ldrb	r3, [r7, #19]
 8003c3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d041      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c50:	d02a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c56:	d824      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c5c:	d008      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c62:	d81e      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c6c:	d010      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c6e:	e018      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c70:	4b62      	ldr	r3, [pc, #392]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a61      	ldr	r2, [pc, #388]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c7c:	e015      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fa73 	bl	8004170 <RCCEx_PLLSAI1_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c8e:	e00c      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3320      	adds	r3, #32
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fb5e 	bl	8004358 <RCCEx_PLLSAI2_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ca6:	e000      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10b      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cb0:	4b52      	ldr	r3, [pc, #328]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cbe:	494f      	ldr	r1, [pc, #316]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cc6:	e001      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc8:	7cfb      	ldrb	r3, [r7, #19]
 8003cca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80a0 	beq.w	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cde:	4b47      	ldr	r3, [pc, #284]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00d      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf4:	4b41      	ldr	r3, [pc, #260]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf8:	4a40      	ldr	r2, [pc, #256]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d00:	4b3e      	ldr	r3, [pc, #248]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d10:	4b3b      	ldr	r3, [pc, #236]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a3a      	ldr	r2, [pc, #232]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d1c:	f7fd fc58 	bl	80015d0 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d22:	e009      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d24:	f7fd fc54 	bl	80015d0 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d902      	bls.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	74fb      	strb	r3, [r7, #19]
        break;
 8003d36:	e005      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d38:	4b31      	ldr	r3, [pc, #196]	@ (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0ef      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d15c      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01f      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d019      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d68:	4b24      	ldr	r3, [pc, #144]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d74:	4b21      	ldr	r3, [pc, #132]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7a:	4a20      	ldr	r2, [pc, #128]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d84:	4b1d      	ldr	r3, [pc, #116]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d94:	4a19      	ldr	r2, [pc, #100]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fd fc13 	bl	80015d0 <HAL_GetTick>
 8003daa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dac:	e00b      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fd fc0f 	bl	80015d0 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d902      	bls.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	74fb      	strb	r3, [r7, #19]
            break;
 8003dc4:	e006      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ec      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dda:	4b08      	ldr	r3, [pc, #32]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dea:	4904      	ldr	r1, [pc, #16]	@ (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003df2:	e009      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	74bb      	strb	r3, [r7, #18]
 8003df8:	e006      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dfa:	bf00      	nop
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
 8003e06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e08:	7c7b      	ldrb	r3, [r7, #17]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d105      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0e:	4b9e      	ldr	r3, [pc, #632]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e12:	4a9d      	ldr	r2, [pc, #628]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e26:	4b98      	ldr	r3, [pc, #608]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2c:	f023 0203 	bic.w	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e34:	4994      	ldr	r1, [pc, #592]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e48:	4b8f      	ldr	r3, [pc, #572]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4e:	f023 020c 	bic.w	r2, r3, #12
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e56:	498c      	ldr	r1, [pc, #560]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e6a:	4b87      	ldr	r3, [pc, #540]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	4983      	ldr	r1, [pc, #524]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9a:	497b      	ldr	r1, [pc, #492]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eae:	4b76      	ldr	r3, [pc, #472]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ebc:	4972      	ldr	r1, [pc, #456]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ed0:	4b6d      	ldr	r3, [pc, #436]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ede:	496a      	ldr	r1, [pc, #424]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef2:	4b65      	ldr	r3, [pc, #404]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f00:	4961      	ldr	r1, [pc, #388]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f14:	4b5c      	ldr	r3, [pc, #368]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f22:	4959      	ldr	r1, [pc, #356]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f36:	4b54      	ldr	r3, [pc, #336]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f44:	4950      	ldr	r1, [pc, #320]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f58:	4b4b      	ldr	r3, [pc, #300]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f66:	4948      	ldr	r1, [pc, #288]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f7a:	4b43      	ldr	r3, [pc, #268]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f88:	493f      	ldr	r1, [pc, #252]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d028      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003faa:	4937      	ldr	r1, [pc, #220]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fba:	d106      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fbc:	4b32      	ldr	r3, [pc, #200]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a31      	ldr	r2, [pc, #196]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fc6:	60d3      	str	r3, [r2, #12]
 8003fc8:	e011      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fd2:	d10c      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f8c8 	bl	8004170 <RCCEx_PLLSAI1_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fea:	7cfb      	ldrb	r3, [r7, #19]
 8003fec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d028      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ffa:	4b23      	ldr	r3, [pc, #140]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004000:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004008:	491f      	ldr	r1, [pc, #124]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004014:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004018:	d106      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800401a:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	4a1a      	ldr	r2, [pc, #104]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004020:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004024:	60d3      	str	r3, [r2, #12]
 8004026:	e011      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004030:	d10c      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3304      	adds	r3, #4
 8004036:	2101      	movs	r1, #1
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f899 	bl	8004170 <RCCEx_PLLSAI1_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004048:	7cfb      	ldrb	r3, [r7, #19]
 800404a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d02b      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	4908      	ldr	r1, [pc, #32]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004072:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004076:	d109      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004078:	4b03      	ldr	r3, [pc, #12]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	4a02      	ldr	r2, [pc, #8]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004082:	60d3      	str	r3, [r2, #12]
 8004084:	e014      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004090:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	2101      	movs	r1, #1
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f867 	bl	8004170 <RCCEx_PLLSAI1_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d02f      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040bc:	4b2b      	ldr	r3, [pc, #172]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040ca:	4928      	ldr	r1, [pc, #160]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040da:	d10d      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3304      	adds	r3, #4
 80040e0:	2102      	movs	r1, #2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f844 	bl	8004170 <RCCEx_PLLSAI1_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d014      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	74bb      	strb	r3, [r7, #18]
 80040f6:	e011      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004100:	d10c      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3320      	adds	r3, #32
 8004106:	2102      	movs	r1, #2
 8004108:	4618      	mov	r0, r3
 800410a:	f000 f925 	bl	8004358 <RCCEx_PLLSAI2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004112:	7cfb      	ldrb	r3, [r7, #19]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004128:	4b10      	ldr	r3, [pc, #64]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004136:	490d      	ldr	r1, [pc, #52]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800414a:	4b08      	ldr	r3, [pc, #32]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800415a:	4904      	ldr	r1, [pc, #16]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004162:	7cbb      	ldrb	r3, [r7, #18]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000

08004170 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800417e:	4b75      	ldr	r3, [pc, #468]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d018      	beq.n	80041bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800418a:	4b72      	ldr	r3, [pc, #456]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0203 	and.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d10d      	bne.n	80041b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
       ||
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80041a2:	4b6c      	ldr	r3, [pc, #432]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
       ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d047      	beq.n	8004246 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
 80041ba:	e044      	b.n	8004246 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d018      	beq.n	80041f6 <RCCEx_PLLSAI1_Config+0x86>
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d825      	bhi.n	8004214 <RCCEx_PLLSAI1_Config+0xa4>
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d002      	beq.n	80041d2 <RCCEx_PLLSAI1_Config+0x62>
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d009      	beq.n	80041e4 <RCCEx_PLLSAI1_Config+0x74>
 80041d0:	e020      	b.n	8004214 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041d2:	4b60      	ldr	r3, [pc, #384]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11d      	bne.n	800421a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e2:	e01a      	b.n	800421a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041e4:	4b5b      	ldr	r3, [pc, #364]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d116      	bne.n	800421e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f4:	e013      	b.n	800421e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041f6:	4b57      	ldr	r3, [pc, #348]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004202:	4b54      	ldr	r3, [pc, #336]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004212:	e006      	b.n	8004222 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      break;
 8004218:	e004      	b.n	8004224 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800421a:	bf00      	nop
 800421c:	e002      	b.n	8004224 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004222:	bf00      	nop
    }

    if(status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10d      	bne.n	8004246 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800422a:	4b4a      	ldr	r3, [pc, #296]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	430b      	orrs	r3, r1
 8004240:	4944      	ldr	r1, [pc, #272]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004242:	4313      	orrs	r3, r2
 8004244:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d17d      	bne.n	8004348 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800424c:	4b41      	ldr	r3, [pc, #260]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a40      	ldr	r2, [pc, #256]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004252:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004256:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004258:	f7fd f9ba 	bl	80015d0 <HAL_GetTick>
 800425c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800425e:	e009      	b.n	8004274 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004260:	f7fd f9b6 	bl	80015d0 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d902      	bls.n	8004274 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	73fb      	strb	r3, [r7, #15]
        break;
 8004272:	e005      	b.n	8004280 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004274:	4b37      	ldr	r3, [pc, #220]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1ef      	bne.n	8004260 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d160      	bne.n	8004348 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d111      	bne.n	80042b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800428c:	4b31      	ldr	r3, [pc, #196]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6892      	ldr	r2, [r2, #8]
 800429c:	0211      	lsls	r1, r2, #8
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68d2      	ldr	r2, [r2, #12]
 80042a2:	0912      	lsrs	r2, r2, #4
 80042a4:	0452      	lsls	r2, r2, #17
 80042a6:	430a      	orrs	r2, r1
 80042a8:	492a      	ldr	r1, [pc, #168]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	610b      	str	r3, [r1, #16]
 80042ae:	e027      	b.n	8004300 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d112      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042b6:	4b27      	ldr	r3, [pc, #156]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80042be:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6892      	ldr	r2, [r2, #8]
 80042c6:	0211      	lsls	r1, r2, #8
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6912      	ldr	r2, [r2, #16]
 80042cc:	0852      	lsrs	r2, r2, #1
 80042ce:	3a01      	subs	r2, #1
 80042d0:	0552      	lsls	r2, r2, #21
 80042d2:	430a      	orrs	r2, r1
 80042d4:	491f      	ldr	r1, [pc, #124]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	610b      	str	r3, [r1, #16]
 80042da:	e011      	b.n	8004300 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6892      	ldr	r2, [r2, #8]
 80042ec:	0211      	lsls	r1, r2, #8
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6952      	ldr	r2, [r2, #20]
 80042f2:	0852      	lsrs	r2, r2, #1
 80042f4:	3a01      	subs	r2, #1
 80042f6:	0652      	lsls	r2, r2, #25
 80042f8:	430a      	orrs	r2, r1
 80042fa:	4916      	ldr	r1, [pc, #88]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004300:	4b14      	ldr	r3, [pc, #80]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a13      	ldr	r2, [pc, #76]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004306:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800430a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430c:	f7fd f960 	bl	80015d0 <HAL_GetTick>
 8004310:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004312:	e009      	b.n	8004328 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004314:	f7fd f95c 	bl	80015d0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d902      	bls.n	8004328 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	73fb      	strb	r3, [r7, #15]
          break;
 8004326:	e005      	b.n	8004334 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004328:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0ef      	beq.n	8004314 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800433a:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	4904      	ldr	r1, [pc, #16]	@ (8004354 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004344:	4313      	orrs	r3, r2
 8004346:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004348:	7bfb      	ldrb	r3, [r7, #15]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40021000 	.word	0x40021000

08004358 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004366:	4b6a      	ldr	r3, [pc, #424]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d018      	beq.n	80043a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004372:	4b67      	ldr	r3, [pc, #412]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0203 	and.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d10d      	bne.n	800439e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
       ||
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800438a:	4b61      	ldr	r3, [pc, #388]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	091b      	lsrs	r3, r3, #4
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
       ||
 800439a:	429a      	cmp	r2, r3
 800439c:	d047      	beq.n	800442e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
 80043a2:	e044      	b.n	800442e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d018      	beq.n	80043de <RCCEx_PLLSAI2_Config+0x86>
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d825      	bhi.n	80043fc <RCCEx_PLLSAI2_Config+0xa4>
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d002      	beq.n	80043ba <RCCEx_PLLSAI2_Config+0x62>
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d009      	beq.n	80043cc <RCCEx_PLLSAI2_Config+0x74>
 80043b8:	e020      	b.n	80043fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ba:	4b55      	ldr	r3, [pc, #340]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11d      	bne.n	8004402 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ca:	e01a      	b.n	8004402 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043cc:	4b50      	ldr	r3, [pc, #320]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d116      	bne.n	8004406 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043dc:	e013      	b.n	8004406 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043de:	4b4c      	ldr	r3, [pc, #304]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ea:	4b49      	ldr	r3, [pc, #292]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043fa:	e006      	b.n	800440a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004400:	e004      	b.n	800440c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004402:	bf00      	nop
 8004404:	e002      	b.n	800440c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800440a:	bf00      	nop
    }

    if(status == HAL_OK)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10d      	bne.n	800442e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004412:	4b3f      	ldr	r3, [pc, #252]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6819      	ldr	r1, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	3b01      	subs	r3, #1
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	430b      	orrs	r3, r1
 8004428:	4939      	ldr	r1, [pc, #228]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442a:	4313      	orrs	r3, r2
 800442c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d167      	bne.n	8004504 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004434:	4b36      	ldr	r3, [pc, #216]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a35      	ldr	r2, [pc, #212]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800443a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800443e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004440:	f7fd f8c6 	bl	80015d0 <HAL_GetTick>
 8004444:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004446:	e009      	b.n	800445c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004448:	f7fd f8c2 	bl	80015d0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d902      	bls.n	800445c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	73fb      	strb	r3, [r7, #15]
        break;
 800445a:	e005      	b.n	8004468 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800445c:	4b2c      	ldr	r3, [pc, #176]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1ef      	bne.n	8004448 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d14a      	bne.n	8004504 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d111      	bne.n	8004498 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004474:	4b26      	ldr	r3, [pc, #152]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800447c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6892      	ldr	r2, [r2, #8]
 8004484:	0211      	lsls	r1, r2, #8
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68d2      	ldr	r2, [r2, #12]
 800448a:	0912      	lsrs	r2, r2, #4
 800448c:	0452      	lsls	r2, r2, #17
 800448e:	430a      	orrs	r2, r1
 8004490:	491f      	ldr	r1, [pc, #124]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004492:	4313      	orrs	r3, r2
 8004494:	614b      	str	r3, [r1, #20]
 8004496:	e011      	b.n	80044bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004498:	4b1d      	ldr	r3, [pc, #116]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80044a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6892      	ldr	r2, [r2, #8]
 80044a8:	0211      	lsls	r1, r2, #8
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6912      	ldr	r2, [r2, #16]
 80044ae:	0852      	lsrs	r2, r2, #1
 80044b0:	3a01      	subs	r2, #1
 80044b2:	0652      	lsls	r2, r2, #25
 80044b4:	430a      	orrs	r2, r1
 80044b6:	4916      	ldr	r1, [pc, #88]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044bc:	4b14      	ldr	r3, [pc, #80]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a13      	ldr	r2, [pc, #76]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c8:	f7fd f882 	bl	80015d0 <HAL_GetTick>
 80044cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044ce:	e009      	b.n	80044e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044d0:	f7fd f87e 	bl	80015d0 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d902      	bls.n	80044e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	73fb      	strb	r3, [r7, #15]
          break;
 80044e2:	e005      	b.n	80044f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0ef      	beq.n	80044d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044f6:	4b06      	ldr	r3, [pc, #24]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4904      	ldr	r1, [pc, #16]	@ (8004510 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004500:	4313      	orrs	r3, r2
 8004502:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000

08004514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e049      	b.n	80045ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fc fddc 	bl	80010f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f000 fa9a 	bl	8004a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d001      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e04f      	b.n	800467c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a23      	ldr	r2, [pc, #140]	@ (8004688 <HAL_TIM_Base_Start_IT+0xc4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01d      	beq.n	800463a <HAL_TIM_Base_Start_IT+0x76>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004606:	d018      	beq.n	800463a <HAL_TIM_Base_Start_IT+0x76>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1f      	ldr	r2, [pc, #124]	@ (800468c <HAL_TIM_Base_Start_IT+0xc8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <HAL_TIM_Base_Start_IT+0x76>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1e      	ldr	r2, [pc, #120]	@ (8004690 <HAL_TIM_Base_Start_IT+0xcc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00e      	beq.n	800463a <HAL_TIM_Base_Start_IT+0x76>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1c      	ldr	r2, [pc, #112]	@ (8004694 <HAL_TIM_Base_Start_IT+0xd0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d009      	beq.n	800463a <HAL_TIM_Base_Start_IT+0x76>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1b      	ldr	r2, [pc, #108]	@ (8004698 <HAL_TIM_Base_Start_IT+0xd4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d004      	beq.n	800463a <HAL_TIM_Base_Start_IT+0x76>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a19      	ldr	r2, [pc, #100]	@ (800469c <HAL_TIM_Base_Start_IT+0xd8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d115      	bne.n	8004666 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	4b17      	ldr	r3, [pc, #92]	@ (80046a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004642:	4013      	ands	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b06      	cmp	r3, #6
 800464a:	d015      	beq.n	8004678 <HAL_TIM_Base_Start_IT+0xb4>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004652:	d011      	beq.n	8004678 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004664:	e008      	b.n	8004678 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	e000      	b.n	800467a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40000400 	.word	0x40000400
 8004690:	40000800 	.word	0x40000800
 8004694:	40000c00 	.word	0x40000c00
 8004698:	40013400 	.word	0x40013400
 800469c:	40014000 	.word	0x40014000
 80046a0:	00010007 	.word	0x00010007

080046a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d020      	beq.n	8004708 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01b      	beq.n	8004708 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0202 	mvn.w	r2, #2
 80046d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f9ad 	bl	8004a4e <HAL_TIM_IC_CaptureCallback>
 80046f4:	e005      	b.n	8004702 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f99f 	bl	8004a3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f9b0 	bl	8004a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d020      	beq.n	8004754 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01b      	beq.n	8004754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0204 	mvn.w	r2, #4
 8004724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f987 	bl	8004a4e <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f979 	bl	8004a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f98a 	bl	8004a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d020      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01b      	beq.n	80047a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0208 	mvn.w	r2, #8
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2204      	movs	r2, #4
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f961 	bl	8004a4e <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f953 	bl	8004a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f964 	bl	8004a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d020      	beq.n	80047ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01b      	beq.n	80047ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0210 	mvn.w	r2, #16
 80047bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2208      	movs	r2, #8
 80047c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f93b 	bl	8004a4e <HAL_TIM_IC_CaptureCallback>
 80047d8:	e005      	b.n	80047e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f92d 	bl	8004a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f93e 	bl	8004a62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00c      	beq.n	8004810 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d007      	beq.n	8004810 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0201 	mvn.w	r2, #1
 8004808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc fbbc 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00c      	beq.n	8004834 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004820:	2b00      	cmp	r3, #0
 8004822:	d007      	beq.n	8004834 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800482c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 faf2 	bl	8004e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00c      	beq.n	8004858 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d007      	beq.n	8004858 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 faea 	bl	8004e2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00c      	beq.n	800487c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f8fd 	bl	8004a76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00c      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0220 	mvn.w	r2, #32
 8004898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fab2 	bl	8004e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_TIM_ConfigClockSource+0x1c>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e0b6      	b.n	8004a32 <HAL_TIM_ConfigClockSource+0x18a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004900:	d03e      	beq.n	8004980 <HAL_TIM_ConfigClockSource+0xd8>
 8004902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004906:	f200 8087 	bhi.w	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800490e:	f000 8086 	beq.w	8004a1e <HAL_TIM_ConfigClockSource+0x176>
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004916:	d87f      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004918:	2b70      	cmp	r3, #112	@ 0x70
 800491a:	d01a      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0xaa>
 800491c:	2b70      	cmp	r3, #112	@ 0x70
 800491e:	d87b      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004920:	2b60      	cmp	r3, #96	@ 0x60
 8004922:	d050      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x11e>
 8004924:	2b60      	cmp	r3, #96	@ 0x60
 8004926:	d877      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004928:	2b50      	cmp	r3, #80	@ 0x50
 800492a:	d03c      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0xfe>
 800492c:	2b50      	cmp	r3, #80	@ 0x50
 800492e:	d873      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004930:	2b40      	cmp	r3, #64	@ 0x40
 8004932:	d058      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x13e>
 8004934:	2b40      	cmp	r3, #64	@ 0x40
 8004936:	d86f      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004938:	2b30      	cmp	r3, #48	@ 0x30
 800493a:	d064      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x15e>
 800493c:	2b30      	cmp	r3, #48	@ 0x30
 800493e:	d86b      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004940:	2b20      	cmp	r3, #32
 8004942:	d060      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x15e>
 8004944:	2b20      	cmp	r3, #32
 8004946:	d867      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05c      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x15e>
 800494c:	2b10      	cmp	r3, #16
 800494e:	d05a      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x15e>
 8004950:	e062      	b.n	8004a18 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004962:	f000 f9a7 	bl	8004cb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	609a      	str	r2, [r3, #8]
      break;
 800497e:	e04f      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004990:	f000 f990 	bl	8004cb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049a2:	609a      	str	r2, [r3, #8]
      break;
 80049a4:	e03c      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b2:	461a      	mov	r2, r3
 80049b4:	f000 f904 	bl	8004bc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2150      	movs	r1, #80	@ 0x50
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 f95d 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 80049c4:	e02c      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049d2:	461a      	mov	r2, r3
 80049d4:	f000 f923 	bl	8004c1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2160      	movs	r1, #96	@ 0x60
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 f94d 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 80049e4:	e01c      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f2:	461a      	mov	r2, r3
 80049f4:	f000 f8e4 	bl	8004bc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2140      	movs	r1, #64	@ 0x40
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f93d 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004a04:	e00c      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4610      	mov	r0, r2
 8004a12:	f000 f934 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004a16:	e003      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a1c:	e000      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
	...

08004a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a40      	ldr	r2, [pc, #256]	@ (8004ba0 <TIM_Base_SetConfig+0x114>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aaa:	d00f      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a3d      	ldr	r2, [pc, #244]	@ (8004ba4 <TIM_Base_SetConfig+0x118>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00b      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba8 <TIM_Base_SetConfig+0x11c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d007      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3b      	ldr	r2, [pc, #236]	@ (8004bac <TIM_Base_SetConfig+0x120>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3a      	ldr	r2, [pc, #232]	@ (8004bb0 <TIM_Base_SetConfig+0x124>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d108      	bne.n	8004ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8004ba0 <TIM_Base_SetConfig+0x114>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d01f      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aec:	d01b      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba4 <TIM_Base_SetConfig+0x118>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d017      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2b      	ldr	r2, [pc, #172]	@ (8004ba8 <TIM_Base_SetConfig+0x11c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2a      	ldr	r2, [pc, #168]	@ (8004bac <TIM_Base_SetConfig+0x120>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00f      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a29      	ldr	r2, [pc, #164]	@ (8004bb0 <TIM_Base_SetConfig+0x124>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a28      	ldr	r2, [pc, #160]	@ (8004bb4 <TIM_Base_SetConfig+0x128>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d007      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a27      	ldr	r2, [pc, #156]	@ (8004bb8 <TIM_Base_SetConfig+0x12c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0x9a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a26      	ldr	r2, [pc, #152]	@ (8004bbc <TIM_Base_SetConfig+0x130>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d108      	bne.n	8004b38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a10      	ldr	r2, [pc, #64]	@ (8004ba0 <TIM_Base_SetConfig+0x114>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00f      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a12      	ldr	r2, [pc, #72]	@ (8004bb0 <TIM_Base_SetConfig+0x124>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00b      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a11      	ldr	r2, [pc, #68]	@ (8004bb4 <TIM_Base_SetConfig+0x128>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d007      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a10      	ldr	r2, [pc, #64]	@ (8004bb8 <TIM_Base_SetConfig+0x12c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_Base_SetConfig+0xf8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a0f      	ldr	r2, [pc, #60]	@ (8004bbc <TIM_Base_SetConfig+0x130>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d103      	bne.n	8004b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	615a      	str	r2, [r3, #20]
}
 8004b92:	bf00      	nop
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800
 8004bac:	40000c00 	.word	0x40000c00
 8004bb0:	40013400 	.word	0x40013400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	40014800 	.word	0x40014800

08004bc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f023 0201 	bic.w	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 030a 	bic.w	r3, r3, #10
 8004bfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	621a      	str	r2, [r3, #32]
}
 8004c12:	bf00      	nop
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b087      	sub	sp, #28
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f023 0210 	bic.w	r2, r3, #16
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	031b      	lsls	r3, r3, #12
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f043 0307 	orr.w	r3, r3, #7
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	609a      	str	r2, [r3, #8]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	609a      	str	r2, [r3, #8]
}
 8004ce8:	bf00      	nop
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e068      	b.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2e      	ldr	r2, [pc, #184]	@ (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d004      	beq.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d108      	bne.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1e      	ldr	r2, [pc, #120]	@ (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01d      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7e:	d018      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1b      	ldr	r2, [pc, #108]	@ (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a18      	ldr	r2, [pc, #96]	@ (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a13      	ldr	r2, [pc, #76]	@ (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a14      	ldr	r2, [pc, #80]	@ (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10c      	bne.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40013400 	.word	0x40013400
 8004df4:	40000400 	.word	0x40000400
 8004df8:	40000800 	.word	0x40000800
 8004dfc:	40000c00 	.word	0x40000c00
 8004e00:	40014000 	.word	0x40014000

08004e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e040      	b.n	8004ed4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fc f9a6 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2224      	movs	r2, #36	@ 0x24
 8004e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0201 	bic.w	r2, r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fb6a 	bl	8005560 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f8af 	bl	8004ff0 <UART_SetConfig>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e01b      	b.n	8004ed4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fbe9 	bl	80056a4 <UART_CheckIdleState>
 8004ed2:	4603      	mov	r3, r0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	@ 0x28
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d177      	bne.n	8004fe4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_UART_Transmit+0x24>
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e070      	b.n	8004fe6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2221      	movs	r2, #33	@ 0x21
 8004f10:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f12:	f7fc fb5d 	bl	80015d0 <HAL_GetTick>
 8004f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	88fa      	ldrh	r2, [r7, #6]
 8004f1c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	88fa      	ldrh	r2, [r7, #6]
 8004f24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f30:	d108      	bne.n	8004f44 <HAL_UART_Transmit+0x68>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d104      	bne.n	8004f44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	e003      	b.n	8004f4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f4c:	e02f      	b.n	8004fae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2200      	movs	r2, #0
 8004f56:	2180      	movs	r1, #128	@ 0x80
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fc4b 	bl	80057f4 <UART_WaitOnFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d004      	beq.n	8004f6e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e03b      	b.n	8004fe6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	881a      	ldrh	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f80:	b292      	uxth	r2, r2
 8004f82:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	3302      	adds	r3, #2
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	e007      	b.n	8004f9c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	781a      	ldrb	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1c9      	bne.n	8004f4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2140      	movs	r1, #64	@ 0x40
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fc15 	bl	80057f4 <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e005      	b.n	8004fe6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e000      	b.n	8004fe6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004fe4:	2302      	movs	r3, #2
  }
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b08a      	sub	sp, #40	@ 0x28
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	431a      	orrs	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	431a      	orrs	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	4313      	orrs	r3, r2
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4ba4      	ldr	r3, [pc, #656]	@ (80052b0 <UART_SetConfig+0x2c0>)
 8005020:	4013      	ands	r3, r2
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005028:	430b      	orrs	r3, r1
 800502a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a99      	ldr	r2, [pc, #612]	@ (80052b4 <UART_SetConfig+0x2c4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d004      	beq.n	800505c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005058:	4313      	orrs	r3, r2
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506c:	430a      	orrs	r2, r1
 800506e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a90      	ldr	r2, [pc, #576]	@ (80052b8 <UART_SetConfig+0x2c8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d126      	bne.n	80050c8 <UART_SetConfig+0xd8>
 800507a:	4b90      	ldr	r3, [pc, #576]	@ (80052bc <UART_SetConfig+0x2cc>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b03      	cmp	r3, #3
 8005086:	d81b      	bhi.n	80050c0 <UART_SetConfig+0xd0>
 8005088:	a201      	add	r2, pc, #4	@ (adr r2, 8005090 <UART_SetConfig+0xa0>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050a1 	.word	0x080050a1
 8005094:	080050b1 	.word	0x080050b1
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050b9 	.word	0x080050b9
 80050a0:	2301      	movs	r3, #1
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a6:	e116      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80050a8:	2302      	movs	r3, #2
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ae:	e112      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80050b0:	2304      	movs	r3, #4
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b6:	e10e      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80050b8:	2308      	movs	r3, #8
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050be:	e10a      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80050c0:	2310      	movs	r3, #16
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c6:	e106      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a7c      	ldr	r2, [pc, #496]	@ (80052c0 <UART_SetConfig+0x2d0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d138      	bne.n	8005144 <UART_SetConfig+0x154>
 80050d2:	4b7a      	ldr	r3, [pc, #488]	@ (80052bc <UART_SetConfig+0x2cc>)
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d8:	f003 030c 	and.w	r3, r3, #12
 80050dc:	2b0c      	cmp	r3, #12
 80050de:	d82d      	bhi.n	800513c <UART_SetConfig+0x14c>
 80050e0:	a201      	add	r2, pc, #4	@ (adr r2, 80050e8 <UART_SetConfig+0xf8>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	0800511d 	.word	0x0800511d
 80050ec:	0800513d 	.word	0x0800513d
 80050f0:	0800513d 	.word	0x0800513d
 80050f4:	0800513d 	.word	0x0800513d
 80050f8:	0800512d 	.word	0x0800512d
 80050fc:	0800513d 	.word	0x0800513d
 8005100:	0800513d 	.word	0x0800513d
 8005104:	0800513d 	.word	0x0800513d
 8005108:	08005125 	.word	0x08005125
 800510c:	0800513d 	.word	0x0800513d
 8005110:	0800513d 	.word	0x0800513d
 8005114:	0800513d 	.word	0x0800513d
 8005118:	08005135 	.word	0x08005135
 800511c:	2300      	movs	r3, #0
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005122:	e0d8      	b.n	80052d6 <UART_SetConfig+0x2e6>
 8005124:	2302      	movs	r3, #2
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800512a:	e0d4      	b.n	80052d6 <UART_SetConfig+0x2e6>
 800512c:	2304      	movs	r3, #4
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005132:	e0d0      	b.n	80052d6 <UART_SetConfig+0x2e6>
 8005134:	2308      	movs	r3, #8
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513a:	e0cc      	b.n	80052d6 <UART_SetConfig+0x2e6>
 800513c:	2310      	movs	r3, #16
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005142:	e0c8      	b.n	80052d6 <UART_SetConfig+0x2e6>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a5e      	ldr	r2, [pc, #376]	@ (80052c4 <UART_SetConfig+0x2d4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d125      	bne.n	800519a <UART_SetConfig+0x1aa>
 800514e:	4b5b      	ldr	r3, [pc, #364]	@ (80052bc <UART_SetConfig+0x2cc>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005154:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005158:	2b30      	cmp	r3, #48	@ 0x30
 800515a:	d016      	beq.n	800518a <UART_SetConfig+0x19a>
 800515c:	2b30      	cmp	r3, #48	@ 0x30
 800515e:	d818      	bhi.n	8005192 <UART_SetConfig+0x1a2>
 8005160:	2b20      	cmp	r3, #32
 8005162:	d00a      	beq.n	800517a <UART_SetConfig+0x18a>
 8005164:	2b20      	cmp	r3, #32
 8005166:	d814      	bhi.n	8005192 <UART_SetConfig+0x1a2>
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <UART_SetConfig+0x182>
 800516c:	2b10      	cmp	r3, #16
 800516e:	d008      	beq.n	8005182 <UART_SetConfig+0x192>
 8005170:	e00f      	b.n	8005192 <UART_SetConfig+0x1a2>
 8005172:	2300      	movs	r3, #0
 8005174:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005178:	e0ad      	b.n	80052d6 <UART_SetConfig+0x2e6>
 800517a:	2302      	movs	r3, #2
 800517c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005180:	e0a9      	b.n	80052d6 <UART_SetConfig+0x2e6>
 8005182:	2304      	movs	r3, #4
 8005184:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005188:	e0a5      	b.n	80052d6 <UART_SetConfig+0x2e6>
 800518a:	2308      	movs	r3, #8
 800518c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005190:	e0a1      	b.n	80052d6 <UART_SetConfig+0x2e6>
 8005192:	2310      	movs	r3, #16
 8005194:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005198:	e09d      	b.n	80052d6 <UART_SetConfig+0x2e6>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a4a      	ldr	r2, [pc, #296]	@ (80052c8 <UART_SetConfig+0x2d8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d125      	bne.n	80051f0 <UART_SetConfig+0x200>
 80051a4:	4b45      	ldr	r3, [pc, #276]	@ (80052bc <UART_SetConfig+0x2cc>)
 80051a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80051b0:	d016      	beq.n	80051e0 <UART_SetConfig+0x1f0>
 80051b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80051b4:	d818      	bhi.n	80051e8 <UART_SetConfig+0x1f8>
 80051b6:	2b80      	cmp	r3, #128	@ 0x80
 80051b8:	d00a      	beq.n	80051d0 <UART_SetConfig+0x1e0>
 80051ba:	2b80      	cmp	r3, #128	@ 0x80
 80051bc:	d814      	bhi.n	80051e8 <UART_SetConfig+0x1f8>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <UART_SetConfig+0x1d8>
 80051c2:	2b40      	cmp	r3, #64	@ 0x40
 80051c4:	d008      	beq.n	80051d8 <UART_SetConfig+0x1e8>
 80051c6:	e00f      	b.n	80051e8 <UART_SetConfig+0x1f8>
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ce:	e082      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80051d0:	2302      	movs	r3, #2
 80051d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051d6:	e07e      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80051d8:	2304      	movs	r3, #4
 80051da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051de:	e07a      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80051e0:	2308      	movs	r3, #8
 80051e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051e6:	e076      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80051e8:	2310      	movs	r3, #16
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ee:	e072      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a35      	ldr	r2, [pc, #212]	@ (80052cc <UART_SetConfig+0x2dc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d12a      	bne.n	8005250 <UART_SetConfig+0x260>
 80051fa:	4b30      	ldr	r3, [pc, #192]	@ (80052bc <UART_SetConfig+0x2cc>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005208:	d01a      	beq.n	8005240 <UART_SetConfig+0x250>
 800520a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800520e:	d81b      	bhi.n	8005248 <UART_SetConfig+0x258>
 8005210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005214:	d00c      	beq.n	8005230 <UART_SetConfig+0x240>
 8005216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800521a:	d815      	bhi.n	8005248 <UART_SetConfig+0x258>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <UART_SetConfig+0x238>
 8005220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005224:	d008      	beq.n	8005238 <UART_SetConfig+0x248>
 8005226:	e00f      	b.n	8005248 <UART_SetConfig+0x258>
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800522e:	e052      	b.n	80052d6 <UART_SetConfig+0x2e6>
 8005230:	2302      	movs	r3, #2
 8005232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005236:	e04e      	b.n	80052d6 <UART_SetConfig+0x2e6>
 8005238:	2304      	movs	r3, #4
 800523a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800523e:	e04a      	b.n	80052d6 <UART_SetConfig+0x2e6>
 8005240:	2308      	movs	r3, #8
 8005242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005246:	e046      	b.n	80052d6 <UART_SetConfig+0x2e6>
 8005248:	2310      	movs	r3, #16
 800524a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800524e:	e042      	b.n	80052d6 <UART_SetConfig+0x2e6>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a17      	ldr	r2, [pc, #92]	@ (80052b4 <UART_SetConfig+0x2c4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d13a      	bne.n	80052d0 <UART_SetConfig+0x2e0>
 800525a:	4b18      	ldr	r3, [pc, #96]	@ (80052bc <UART_SetConfig+0x2cc>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005260:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005264:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005268:	d01a      	beq.n	80052a0 <UART_SetConfig+0x2b0>
 800526a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800526e:	d81b      	bhi.n	80052a8 <UART_SetConfig+0x2b8>
 8005270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005274:	d00c      	beq.n	8005290 <UART_SetConfig+0x2a0>
 8005276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800527a:	d815      	bhi.n	80052a8 <UART_SetConfig+0x2b8>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <UART_SetConfig+0x298>
 8005280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005284:	d008      	beq.n	8005298 <UART_SetConfig+0x2a8>
 8005286:	e00f      	b.n	80052a8 <UART_SetConfig+0x2b8>
 8005288:	2300      	movs	r3, #0
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800528e:	e022      	b.n	80052d6 <UART_SetConfig+0x2e6>
 8005290:	2302      	movs	r3, #2
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005296:	e01e      	b.n	80052d6 <UART_SetConfig+0x2e6>
 8005298:	2304      	movs	r3, #4
 800529a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800529e:	e01a      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80052a0:	2308      	movs	r3, #8
 80052a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052a6:	e016      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80052a8:	2310      	movs	r3, #16
 80052aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ae:	e012      	b.n	80052d6 <UART_SetConfig+0x2e6>
 80052b0:	efff69f3 	.word	0xefff69f3
 80052b4:	40008000 	.word	0x40008000
 80052b8:	40013800 	.word	0x40013800
 80052bc:	40021000 	.word	0x40021000
 80052c0:	40004400 	.word	0x40004400
 80052c4:	40004800 	.word	0x40004800
 80052c8:	40004c00 	.word	0x40004c00
 80052cc:	40005000 	.word	0x40005000
 80052d0:	2310      	movs	r3, #16
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a9f      	ldr	r2, [pc, #636]	@ (8005558 <UART_SetConfig+0x568>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d17a      	bne.n	80053d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d824      	bhi.n	8005332 <UART_SetConfig+0x342>
 80052e8:	a201      	add	r2, pc, #4	@ (adr r2, 80052f0 <UART_SetConfig+0x300>)
 80052ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ee:	bf00      	nop
 80052f0:	08005315 	.word	0x08005315
 80052f4:	08005333 	.word	0x08005333
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	08005333 	.word	0x08005333
 8005300:	08005323 	.word	0x08005323
 8005304:	08005333 	.word	0x08005333
 8005308:	08005333 	.word	0x08005333
 800530c:	08005333 	.word	0x08005333
 8005310:	0800532b 	.word	0x0800532b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005314:	f7fe fbb6 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 8005318:	61f8      	str	r0, [r7, #28]
        break;
 800531a:	e010      	b.n	800533e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800531c:	4b8f      	ldr	r3, [pc, #572]	@ (800555c <UART_SetConfig+0x56c>)
 800531e:	61fb      	str	r3, [r7, #28]
        break;
 8005320:	e00d      	b.n	800533e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005322:	f7fe fb17 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8005326:	61f8      	str	r0, [r7, #28]
        break;
 8005328:	e009      	b.n	800533e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800532a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800532e:	61fb      	str	r3, [r7, #28]
        break;
 8005330:	e005      	b.n	800533e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800533c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 80fb 	beq.w	800553c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	429a      	cmp	r2, r3
 8005354:	d305      	bcc.n	8005362 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	429a      	cmp	r2, r3
 8005360:	d903      	bls.n	800536a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005368:	e0e8      	b.n	800553c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	2200      	movs	r2, #0
 800536e:	461c      	mov	r4, r3
 8005370:	4615      	mov	r5, r2
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	022b      	lsls	r3, r5, #8
 800537c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005380:	0222      	lsls	r2, r4, #8
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	6849      	ldr	r1, [r1, #4]
 8005386:	0849      	lsrs	r1, r1, #1
 8005388:	2000      	movs	r0, #0
 800538a:	4688      	mov	r8, r1
 800538c:	4681      	mov	r9, r0
 800538e:	eb12 0a08 	adds.w	sl, r2, r8
 8005392:	eb43 0b09 	adc.w	fp, r3, r9
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	603b      	str	r3, [r7, #0]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053a4:	4650      	mov	r0, sl
 80053a6:	4659      	mov	r1, fp
 80053a8:	f7fa ff62 	bl	8000270 <__aeabi_uldivmod>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4613      	mov	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053ba:	d308      	bcc.n	80053ce <UART_SetConfig+0x3de>
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053c2:	d204      	bcs.n	80053ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	60da      	str	r2, [r3, #12]
 80053cc:	e0b6      	b.n	800553c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053d4:	e0b2      	b.n	800553c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053de:	d15e      	bne.n	800549e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80053e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d828      	bhi.n	800543a <UART_SetConfig+0x44a>
 80053e8:	a201      	add	r2, pc, #4	@ (adr r2, 80053f0 <UART_SetConfig+0x400>)
 80053ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ee:	bf00      	nop
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	0800543b 	.word	0x0800543b
 8005400:	0800542b 	.word	0x0800542b
 8005404:	0800543b 	.word	0x0800543b
 8005408:	0800543b 	.word	0x0800543b
 800540c:	0800543b 	.word	0x0800543b
 8005410:	08005433 	.word	0x08005433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005414:	f7fe fb36 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 8005418:	61f8      	str	r0, [r7, #28]
        break;
 800541a:	e014      	b.n	8005446 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7fe fb48 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 8005420:	61f8      	str	r0, [r7, #28]
        break;
 8005422:	e010      	b.n	8005446 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005424:	4b4d      	ldr	r3, [pc, #308]	@ (800555c <UART_SetConfig+0x56c>)
 8005426:	61fb      	str	r3, [r7, #28]
        break;
 8005428:	e00d      	b.n	8005446 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542a:	f7fe fa93 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 800542e:	61f8      	str	r0, [r7, #28]
        break;
 8005430:	e009      	b.n	8005446 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005436:	61fb      	str	r3, [r7, #28]
        break;
 8005438:	e005      	b.n	8005446 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d077      	beq.n	800553c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	005a      	lsls	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	441a      	add	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	2b0f      	cmp	r3, #15
 8005466:	d916      	bls.n	8005496 <UART_SetConfig+0x4a6>
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800546e:	d212      	bcs.n	8005496 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	b29b      	uxth	r3, r3
 8005474:	f023 030f 	bic.w	r3, r3, #15
 8005478:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	b29b      	uxth	r3, r3
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	b29a      	uxth	r2, r3
 8005486:	8afb      	ldrh	r3, [r7, #22]
 8005488:	4313      	orrs	r3, r2
 800548a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	8afa      	ldrh	r2, [r7, #22]
 8005492:	60da      	str	r2, [r3, #12]
 8005494:	e052      	b.n	800553c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800549c:	e04e      	b.n	800553c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800549e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d827      	bhi.n	80054f6 <UART_SetConfig+0x506>
 80054a6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ac <UART_SetConfig+0x4bc>)
 80054a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d9 	.word	0x080054d9
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	080054f7 	.word	0x080054f7
 80054bc:	080054e7 	.word	0x080054e7
 80054c0:	080054f7 	.word	0x080054f7
 80054c4:	080054f7 	.word	0x080054f7
 80054c8:	080054f7 	.word	0x080054f7
 80054cc:	080054ef 	.word	0x080054ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d0:	f7fe fad8 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 80054d4:	61f8      	str	r0, [r7, #28]
        break;
 80054d6:	e014      	b.n	8005502 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d8:	f7fe faea 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 80054dc:	61f8      	str	r0, [r7, #28]
        break;
 80054de:	e010      	b.n	8005502 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e0:	4b1e      	ldr	r3, [pc, #120]	@ (800555c <UART_SetConfig+0x56c>)
 80054e2:	61fb      	str	r3, [r7, #28]
        break;
 80054e4:	e00d      	b.n	8005502 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e6:	f7fe fa35 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 80054ea:	61f8      	str	r0, [r7, #28]
        break;
 80054ec:	e009      	b.n	8005502 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054f2:	61fb      	str	r3, [r7, #28]
        break;
 80054f4:	e005      	b.n	8005502 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005500:	bf00      	nop
    }

    if (pclk != 0U)
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d019      	beq.n	800553c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	085a      	lsrs	r2, r3, #1
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	441a      	add	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	2b0f      	cmp	r3, #15
 8005520:	d909      	bls.n	8005536 <UART_SetConfig+0x546>
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005528:	d205      	bcs.n	8005536 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60da      	str	r2, [r3, #12]
 8005534:	e002      	b.n	800553c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005548:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800554c:	4618      	mov	r0, r3
 800554e:	3728      	adds	r7, #40	@ 0x28
 8005550:	46bd      	mov	sp, r7
 8005552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005556:	bf00      	nop
 8005558:	40008000 	.word	0x40008000
 800555c:	00f42400 	.word	0x00f42400

08005560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01a      	beq.n	8005676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800565e:	d10a      	bne.n	8005676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	605a      	str	r2, [r3, #4]
  }
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b098      	sub	sp, #96	@ 0x60
 80056a8:	af02      	add	r7, sp, #8
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056b4:	f7fb ff8c 	bl	80015d0 <HAL_GetTick>
 80056b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d12e      	bne.n	8005726 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d0:	2200      	movs	r2, #0
 80056d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f88c 	bl	80057f4 <UART_WaitOnFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d021      	beq.n	8005726 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005700:	647b      	str	r3, [r7, #68]	@ 0x44
 8005702:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800570e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e6      	bne.n	80056e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e062      	b.n	80057ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b04      	cmp	r3, #4
 8005732:	d149      	bne.n	80057c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800573c:	2200      	movs	r2, #0
 800573e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f856 	bl	80057f4 <UART_WaitOnFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d03c      	beq.n	80057c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	623b      	str	r3, [r7, #32]
   return(result);
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800576c:	633b      	str	r3, [r7, #48]	@ 0x30
 800576e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e6      	bne.n	800574e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3308      	adds	r3, #8
 8005786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0301 	bic.w	r3, r3, #1
 8005796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3308      	adds	r3, #8
 800579e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057a0:	61fa      	str	r2, [r7, #28]
 80057a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	69b9      	ldr	r1, [r7, #24]
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	617b      	str	r3, [r7, #20]
   return(result);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e5      	bne.n	8005780 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e011      	b.n	80057ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3758      	adds	r7, #88	@ 0x58
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005804:	e049      	b.n	800589a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d045      	beq.n	800589a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580e:	f7fb fedf 	bl	80015d0 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	429a      	cmp	r2, r3
 800581c:	d302      	bcc.n	8005824 <UART_WaitOnFlagUntilTimeout+0x30>
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e048      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d031      	beq.n	800589a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b08      	cmp	r3, #8
 8005842:	d110      	bne.n	8005866 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2208      	movs	r2, #8
 800584a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f838 	bl	80058c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2208      	movs	r2, #8
 8005856:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e029      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005874:	d111      	bne.n	800589a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800587e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f81e 	bl	80058c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e00f      	b.n	80058ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4013      	ands	r3, r2
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	bf0c      	ite	eq
 80058aa:	2301      	moveq	r3, #1
 80058ac:	2300      	movne	r3, #0
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	461a      	mov	r2, r3
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d0a6      	beq.n	8005806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b095      	sub	sp, #84	@ 0x54
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e6      	bne.n	80058ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3308      	adds	r3, #8
 8005902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	61fb      	str	r3, [r7, #28]
   return(result);
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3308      	adds	r3, #8
 800591a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800591c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800591e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e5      	bne.n	80058fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005934:	2b01      	cmp	r3, #1
 8005936:	d118      	bne.n	800596a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	60bb      	str	r3, [r7, #8]
   return(result);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f023 0310 	bic.w	r3, r3, #16
 800594c:	647b      	str	r3, [r7, #68]	@ 0x44
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005956:	61bb      	str	r3, [r7, #24]
 8005958:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6979      	ldr	r1, [r7, #20]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	613b      	str	r3, [r7, #16]
   return(result);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e6      	bne.n	8005938 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800597e:	bf00      	nop
 8005980:	3754      	adds	r7, #84	@ 0x54
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <std>:
 800598c:	2300      	movs	r3, #0
 800598e:	b510      	push	{r4, lr}
 8005990:	4604      	mov	r4, r0
 8005992:	e9c0 3300 	strd	r3, r3, [r0]
 8005996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800599a:	6083      	str	r3, [r0, #8]
 800599c:	8181      	strh	r1, [r0, #12]
 800599e:	6643      	str	r3, [r0, #100]	@ 0x64
 80059a0:	81c2      	strh	r2, [r0, #14]
 80059a2:	6183      	str	r3, [r0, #24]
 80059a4:	4619      	mov	r1, r3
 80059a6:	2208      	movs	r2, #8
 80059a8:	305c      	adds	r0, #92	@ 0x5c
 80059aa:	f000 f906 	bl	8005bba <memset>
 80059ae:	4b0d      	ldr	r3, [pc, #52]	@ (80059e4 <std+0x58>)
 80059b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80059b2:	4b0d      	ldr	r3, [pc, #52]	@ (80059e8 <std+0x5c>)
 80059b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059b6:	4b0d      	ldr	r3, [pc, #52]	@ (80059ec <std+0x60>)
 80059b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <std+0x64>)
 80059bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80059be:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <std+0x68>)
 80059c0:	6224      	str	r4, [r4, #32]
 80059c2:	429c      	cmp	r4, r3
 80059c4:	d006      	beq.n	80059d4 <std+0x48>
 80059c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059ca:	4294      	cmp	r4, r2
 80059cc:	d002      	beq.n	80059d4 <std+0x48>
 80059ce:	33d0      	adds	r3, #208	@ 0xd0
 80059d0:	429c      	cmp	r4, r3
 80059d2:	d105      	bne.n	80059e0 <std+0x54>
 80059d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059dc:	f000 b966 	b.w	8005cac <__retarget_lock_init_recursive>
 80059e0:	bd10      	pop	{r4, pc}
 80059e2:	bf00      	nop
 80059e4:	08005b35 	.word	0x08005b35
 80059e8:	08005b57 	.word	0x08005b57
 80059ec:	08005b8f 	.word	0x08005b8f
 80059f0:	08005bb3 	.word	0x08005bb3
 80059f4:	2000026c 	.word	0x2000026c

080059f8 <stdio_exit_handler>:
 80059f8:	4a02      	ldr	r2, [pc, #8]	@ (8005a04 <stdio_exit_handler+0xc>)
 80059fa:	4903      	ldr	r1, [pc, #12]	@ (8005a08 <stdio_exit_handler+0x10>)
 80059fc:	4803      	ldr	r0, [pc, #12]	@ (8005a0c <stdio_exit_handler+0x14>)
 80059fe:	f000 b869 	b.w	8005ad4 <_fwalk_sglue>
 8005a02:	bf00      	nop
 8005a04:	2000000c 	.word	0x2000000c
 8005a08:	0800654d 	.word	0x0800654d
 8005a0c:	2000001c 	.word	0x2000001c

08005a10 <cleanup_stdio>:
 8005a10:	6841      	ldr	r1, [r0, #4]
 8005a12:	4b0c      	ldr	r3, [pc, #48]	@ (8005a44 <cleanup_stdio+0x34>)
 8005a14:	4299      	cmp	r1, r3
 8005a16:	b510      	push	{r4, lr}
 8005a18:	4604      	mov	r4, r0
 8005a1a:	d001      	beq.n	8005a20 <cleanup_stdio+0x10>
 8005a1c:	f000 fd96 	bl	800654c <_fflush_r>
 8005a20:	68a1      	ldr	r1, [r4, #8]
 8005a22:	4b09      	ldr	r3, [pc, #36]	@ (8005a48 <cleanup_stdio+0x38>)
 8005a24:	4299      	cmp	r1, r3
 8005a26:	d002      	beq.n	8005a2e <cleanup_stdio+0x1e>
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 fd8f 	bl	800654c <_fflush_r>
 8005a2e:	68e1      	ldr	r1, [r4, #12]
 8005a30:	4b06      	ldr	r3, [pc, #24]	@ (8005a4c <cleanup_stdio+0x3c>)
 8005a32:	4299      	cmp	r1, r3
 8005a34:	d004      	beq.n	8005a40 <cleanup_stdio+0x30>
 8005a36:	4620      	mov	r0, r4
 8005a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a3c:	f000 bd86 	b.w	800654c <_fflush_r>
 8005a40:	bd10      	pop	{r4, pc}
 8005a42:	bf00      	nop
 8005a44:	2000026c 	.word	0x2000026c
 8005a48:	200002d4 	.word	0x200002d4
 8005a4c:	2000033c 	.word	0x2000033c

08005a50 <global_stdio_init.part.0>:
 8005a50:	b510      	push	{r4, lr}
 8005a52:	4b0b      	ldr	r3, [pc, #44]	@ (8005a80 <global_stdio_init.part.0+0x30>)
 8005a54:	4c0b      	ldr	r4, [pc, #44]	@ (8005a84 <global_stdio_init.part.0+0x34>)
 8005a56:	4a0c      	ldr	r2, [pc, #48]	@ (8005a88 <global_stdio_init.part.0+0x38>)
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2104      	movs	r1, #4
 8005a60:	f7ff ff94 	bl	800598c <std>
 8005a64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a68:	2201      	movs	r2, #1
 8005a6a:	2109      	movs	r1, #9
 8005a6c:	f7ff ff8e 	bl	800598c <std>
 8005a70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a74:	2202      	movs	r2, #2
 8005a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a7a:	2112      	movs	r1, #18
 8005a7c:	f7ff bf86 	b.w	800598c <std>
 8005a80:	200003a4 	.word	0x200003a4
 8005a84:	2000026c 	.word	0x2000026c
 8005a88:	080059f9 	.word	0x080059f9

08005a8c <__sfp_lock_acquire>:
 8005a8c:	4801      	ldr	r0, [pc, #4]	@ (8005a94 <__sfp_lock_acquire+0x8>)
 8005a8e:	f000 b90e 	b.w	8005cae <__retarget_lock_acquire_recursive>
 8005a92:	bf00      	nop
 8005a94:	200003ad 	.word	0x200003ad

08005a98 <__sfp_lock_release>:
 8005a98:	4801      	ldr	r0, [pc, #4]	@ (8005aa0 <__sfp_lock_release+0x8>)
 8005a9a:	f000 b909 	b.w	8005cb0 <__retarget_lock_release_recursive>
 8005a9e:	bf00      	nop
 8005aa0:	200003ad 	.word	0x200003ad

08005aa4 <__sinit>:
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	f7ff fff0 	bl	8005a8c <__sfp_lock_acquire>
 8005aac:	6a23      	ldr	r3, [r4, #32]
 8005aae:	b11b      	cbz	r3, 8005ab8 <__sinit+0x14>
 8005ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ab4:	f7ff bff0 	b.w	8005a98 <__sfp_lock_release>
 8005ab8:	4b04      	ldr	r3, [pc, #16]	@ (8005acc <__sinit+0x28>)
 8005aba:	6223      	str	r3, [r4, #32]
 8005abc:	4b04      	ldr	r3, [pc, #16]	@ (8005ad0 <__sinit+0x2c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f5      	bne.n	8005ab0 <__sinit+0xc>
 8005ac4:	f7ff ffc4 	bl	8005a50 <global_stdio_init.part.0>
 8005ac8:	e7f2      	b.n	8005ab0 <__sinit+0xc>
 8005aca:	bf00      	nop
 8005acc:	08005a11 	.word	0x08005a11
 8005ad0:	200003a4 	.word	0x200003a4

08005ad4 <_fwalk_sglue>:
 8005ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad8:	4607      	mov	r7, r0
 8005ada:	4688      	mov	r8, r1
 8005adc:	4614      	mov	r4, r2
 8005ade:	2600      	movs	r6, #0
 8005ae0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ae4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ae8:	d505      	bpl.n	8005af6 <_fwalk_sglue+0x22>
 8005aea:	6824      	ldr	r4, [r4, #0]
 8005aec:	2c00      	cmp	r4, #0
 8005aee:	d1f7      	bne.n	8005ae0 <_fwalk_sglue+0xc>
 8005af0:	4630      	mov	r0, r6
 8005af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005af6:	89ab      	ldrh	r3, [r5, #12]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d907      	bls.n	8005b0c <_fwalk_sglue+0x38>
 8005afc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b00:	3301      	adds	r3, #1
 8005b02:	d003      	beq.n	8005b0c <_fwalk_sglue+0x38>
 8005b04:	4629      	mov	r1, r5
 8005b06:	4638      	mov	r0, r7
 8005b08:	47c0      	blx	r8
 8005b0a:	4306      	orrs	r6, r0
 8005b0c:	3568      	adds	r5, #104	@ 0x68
 8005b0e:	e7e9      	b.n	8005ae4 <_fwalk_sglue+0x10>

08005b10 <iprintf>:
 8005b10:	b40f      	push	{r0, r1, r2, r3}
 8005b12:	b507      	push	{r0, r1, r2, lr}
 8005b14:	4906      	ldr	r1, [pc, #24]	@ (8005b30 <iprintf+0x20>)
 8005b16:	ab04      	add	r3, sp, #16
 8005b18:	6808      	ldr	r0, [r1, #0]
 8005b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b1e:	6881      	ldr	r1, [r0, #8]
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	f000 f9e9 	bl	8005ef8 <_vfiprintf_r>
 8005b26:	b003      	add	sp, #12
 8005b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b2c:	b004      	add	sp, #16
 8005b2e:	4770      	bx	lr
 8005b30:	20000018 	.word	0x20000018

08005b34 <__sread>:
 8005b34:	b510      	push	{r4, lr}
 8005b36:	460c      	mov	r4, r1
 8005b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3c:	f000 f868 	bl	8005c10 <_read_r>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	bfab      	itete	ge
 8005b44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b46:	89a3      	ldrhlt	r3, [r4, #12]
 8005b48:	181b      	addge	r3, r3, r0
 8005b4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b4e:	bfac      	ite	ge
 8005b50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b52:	81a3      	strhlt	r3, [r4, #12]
 8005b54:	bd10      	pop	{r4, pc}

08005b56 <__swrite>:
 8005b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5a:	461f      	mov	r7, r3
 8005b5c:	898b      	ldrh	r3, [r1, #12]
 8005b5e:	05db      	lsls	r3, r3, #23
 8005b60:	4605      	mov	r5, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	4616      	mov	r6, r2
 8005b66:	d505      	bpl.n	8005b74 <__swrite+0x1e>
 8005b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f000 f83c 	bl	8005bec <_lseek_r>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b7e:	81a3      	strh	r3, [r4, #12]
 8005b80:	4632      	mov	r2, r6
 8005b82:	463b      	mov	r3, r7
 8005b84:	4628      	mov	r0, r5
 8005b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8a:	f000 b853 	b.w	8005c34 <_write_r>

08005b8e <__sseek>:
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	460c      	mov	r4, r1
 8005b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b96:	f000 f829 	bl	8005bec <_lseek_r>
 8005b9a:	1c43      	adds	r3, r0, #1
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	bf15      	itete	ne
 8005ba0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ba2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ba6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005baa:	81a3      	strheq	r3, [r4, #12]
 8005bac:	bf18      	it	ne
 8005bae:	81a3      	strhne	r3, [r4, #12]
 8005bb0:	bd10      	pop	{r4, pc}

08005bb2 <__sclose>:
 8005bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb6:	f000 b809 	b.w	8005bcc <_close_r>

08005bba <memset>:
 8005bba:	4402      	add	r2, r0
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d100      	bne.n	8005bc4 <memset+0xa>
 8005bc2:	4770      	bx	lr
 8005bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc8:	e7f9      	b.n	8005bbe <memset+0x4>
	...

08005bcc <_close_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	4d06      	ldr	r5, [pc, #24]	@ (8005be8 <_close_r+0x1c>)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	602b      	str	r3, [r5, #0]
 8005bd8:	f7fb fbe3 	bl	80013a2 <_close>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d102      	bne.n	8005be6 <_close_r+0x1a>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	b103      	cbz	r3, 8005be6 <_close_r+0x1a>
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	bd38      	pop	{r3, r4, r5, pc}
 8005be8:	200003a8 	.word	0x200003a8

08005bec <_lseek_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4d07      	ldr	r5, [pc, #28]	@ (8005c0c <_lseek_r+0x20>)
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	4608      	mov	r0, r1
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	602a      	str	r2, [r5, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f7fb fbf8 	bl	80013f0 <_lseek>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_lseek_r+0x1e>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_lseek_r+0x1e>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	200003a8 	.word	0x200003a8

08005c10 <_read_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d07      	ldr	r5, [pc, #28]	@ (8005c30 <_read_r+0x20>)
 8005c14:	4604      	mov	r4, r0
 8005c16:	4608      	mov	r0, r1
 8005c18:	4611      	mov	r1, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	602a      	str	r2, [r5, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f7fb fb86 	bl	8001330 <_read>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_read_r+0x1e>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_read_r+0x1e>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	200003a8 	.word	0x200003a8

08005c34 <_write_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d07      	ldr	r5, [pc, #28]	@ (8005c54 <_write_r+0x20>)
 8005c38:	4604      	mov	r4, r0
 8005c3a:	4608      	mov	r0, r1
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	602a      	str	r2, [r5, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	f7fb fb91 	bl	800136a <_write>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_write_r+0x1e>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_write_r+0x1e>
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	200003a8 	.word	0x200003a8

08005c58 <__errno>:
 8005c58:	4b01      	ldr	r3, [pc, #4]	@ (8005c60 <__errno+0x8>)
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	20000018 	.word	0x20000018

08005c64 <__libc_init_array>:
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	4d0d      	ldr	r5, [pc, #52]	@ (8005c9c <__libc_init_array+0x38>)
 8005c68:	4c0d      	ldr	r4, [pc, #52]	@ (8005ca0 <__libc_init_array+0x3c>)
 8005c6a:	1b64      	subs	r4, r4, r5
 8005c6c:	10a4      	asrs	r4, r4, #2
 8005c6e:	2600      	movs	r6, #0
 8005c70:	42a6      	cmp	r6, r4
 8005c72:	d109      	bne.n	8005c88 <__libc_init_array+0x24>
 8005c74:	4d0b      	ldr	r5, [pc, #44]	@ (8005ca4 <__libc_init_array+0x40>)
 8005c76:	4c0c      	ldr	r4, [pc, #48]	@ (8005ca8 <__libc_init_array+0x44>)
 8005c78:	f000 fdb8 	bl	80067ec <_init>
 8005c7c:	1b64      	subs	r4, r4, r5
 8005c7e:	10a4      	asrs	r4, r4, #2
 8005c80:	2600      	movs	r6, #0
 8005c82:	42a6      	cmp	r6, r4
 8005c84:	d105      	bne.n	8005c92 <__libc_init_array+0x2e>
 8005c86:	bd70      	pop	{r4, r5, r6, pc}
 8005c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c8c:	4798      	blx	r3
 8005c8e:	3601      	adds	r6, #1
 8005c90:	e7ee      	b.n	8005c70 <__libc_init_array+0xc>
 8005c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c96:	4798      	blx	r3
 8005c98:	3601      	adds	r6, #1
 8005c9a:	e7f2      	b.n	8005c82 <__libc_init_array+0x1e>
 8005c9c:	08006914 	.word	0x08006914
 8005ca0:	08006914 	.word	0x08006914
 8005ca4:	08006914 	.word	0x08006914
 8005ca8:	08006918 	.word	0x08006918

08005cac <__retarget_lock_init_recursive>:
 8005cac:	4770      	bx	lr

08005cae <__retarget_lock_acquire_recursive>:
 8005cae:	4770      	bx	lr

08005cb0 <__retarget_lock_release_recursive>:
 8005cb0:	4770      	bx	lr
	...

08005cb4 <_free_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	2900      	cmp	r1, #0
 8005cba:	d041      	beq.n	8005d40 <_free_r+0x8c>
 8005cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cc0:	1f0c      	subs	r4, r1, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bfb8      	it	lt
 8005cc6:	18e4      	addlt	r4, r4, r3
 8005cc8:	f000 f8e0 	bl	8005e8c <__malloc_lock>
 8005ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d44 <_free_r+0x90>)
 8005cce:	6813      	ldr	r3, [r2, #0]
 8005cd0:	b933      	cbnz	r3, 8005ce0 <_free_r+0x2c>
 8005cd2:	6063      	str	r3, [r4, #4]
 8005cd4:	6014      	str	r4, [r2, #0]
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cdc:	f000 b8dc 	b.w	8005e98 <__malloc_unlock>
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	d908      	bls.n	8005cf6 <_free_r+0x42>
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	1821      	adds	r1, r4, r0
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	bf01      	itttt	eq
 8005cec:	6819      	ldreq	r1, [r3, #0]
 8005cee:	685b      	ldreq	r3, [r3, #4]
 8005cf0:	1809      	addeq	r1, r1, r0
 8005cf2:	6021      	streq	r1, [r4, #0]
 8005cf4:	e7ed      	b.n	8005cd2 <_free_r+0x1e>
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	b10b      	cbz	r3, 8005d00 <_free_r+0x4c>
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	d9fa      	bls.n	8005cf6 <_free_r+0x42>
 8005d00:	6811      	ldr	r1, [r2, #0]
 8005d02:	1850      	adds	r0, r2, r1
 8005d04:	42a0      	cmp	r0, r4
 8005d06:	d10b      	bne.n	8005d20 <_free_r+0x6c>
 8005d08:	6820      	ldr	r0, [r4, #0]
 8005d0a:	4401      	add	r1, r0
 8005d0c:	1850      	adds	r0, r2, r1
 8005d0e:	4283      	cmp	r3, r0
 8005d10:	6011      	str	r1, [r2, #0]
 8005d12:	d1e0      	bne.n	8005cd6 <_free_r+0x22>
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	6053      	str	r3, [r2, #4]
 8005d1a:	4408      	add	r0, r1
 8005d1c:	6010      	str	r0, [r2, #0]
 8005d1e:	e7da      	b.n	8005cd6 <_free_r+0x22>
 8005d20:	d902      	bls.n	8005d28 <_free_r+0x74>
 8005d22:	230c      	movs	r3, #12
 8005d24:	602b      	str	r3, [r5, #0]
 8005d26:	e7d6      	b.n	8005cd6 <_free_r+0x22>
 8005d28:	6820      	ldr	r0, [r4, #0]
 8005d2a:	1821      	adds	r1, r4, r0
 8005d2c:	428b      	cmp	r3, r1
 8005d2e:	bf04      	itt	eq
 8005d30:	6819      	ldreq	r1, [r3, #0]
 8005d32:	685b      	ldreq	r3, [r3, #4]
 8005d34:	6063      	str	r3, [r4, #4]
 8005d36:	bf04      	itt	eq
 8005d38:	1809      	addeq	r1, r1, r0
 8005d3a:	6021      	streq	r1, [r4, #0]
 8005d3c:	6054      	str	r4, [r2, #4]
 8005d3e:	e7ca      	b.n	8005cd6 <_free_r+0x22>
 8005d40:	bd38      	pop	{r3, r4, r5, pc}
 8005d42:	bf00      	nop
 8005d44:	200003b4 	.word	0x200003b4

08005d48 <sbrk_aligned>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4e0f      	ldr	r6, [pc, #60]	@ (8005d88 <sbrk_aligned+0x40>)
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	6831      	ldr	r1, [r6, #0]
 8005d50:	4605      	mov	r5, r0
 8005d52:	b911      	cbnz	r1, 8005d5a <sbrk_aligned+0x12>
 8005d54:	f000 fcb6 	bl	80066c4 <_sbrk_r>
 8005d58:	6030      	str	r0, [r6, #0]
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	f000 fcb1 	bl	80066c4 <_sbrk_r>
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	d103      	bne.n	8005d6e <sbrk_aligned+0x26>
 8005d66:	f04f 34ff 	mov.w	r4, #4294967295
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	bd70      	pop	{r4, r5, r6, pc}
 8005d6e:	1cc4      	adds	r4, r0, #3
 8005d70:	f024 0403 	bic.w	r4, r4, #3
 8005d74:	42a0      	cmp	r0, r4
 8005d76:	d0f8      	beq.n	8005d6a <sbrk_aligned+0x22>
 8005d78:	1a21      	subs	r1, r4, r0
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f000 fca2 	bl	80066c4 <_sbrk_r>
 8005d80:	3001      	adds	r0, #1
 8005d82:	d1f2      	bne.n	8005d6a <sbrk_aligned+0x22>
 8005d84:	e7ef      	b.n	8005d66 <sbrk_aligned+0x1e>
 8005d86:	bf00      	nop
 8005d88:	200003b0 	.word	0x200003b0

08005d8c <_malloc_r>:
 8005d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d90:	1ccd      	adds	r5, r1, #3
 8005d92:	f025 0503 	bic.w	r5, r5, #3
 8005d96:	3508      	adds	r5, #8
 8005d98:	2d0c      	cmp	r5, #12
 8005d9a:	bf38      	it	cc
 8005d9c:	250c      	movcc	r5, #12
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	4606      	mov	r6, r0
 8005da2:	db01      	blt.n	8005da8 <_malloc_r+0x1c>
 8005da4:	42a9      	cmp	r1, r5
 8005da6:	d904      	bls.n	8005db2 <_malloc_r+0x26>
 8005da8:	230c      	movs	r3, #12
 8005daa:	6033      	str	r3, [r6, #0]
 8005dac:	2000      	movs	r0, #0
 8005dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005db2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e88 <_malloc_r+0xfc>
 8005db6:	f000 f869 	bl	8005e8c <__malloc_lock>
 8005dba:	f8d8 3000 	ldr.w	r3, [r8]
 8005dbe:	461c      	mov	r4, r3
 8005dc0:	bb44      	cbnz	r4, 8005e14 <_malloc_r+0x88>
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	f7ff ffbf 	bl	8005d48 <sbrk_aligned>
 8005dca:	1c43      	adds	r3, r0, #1
 8005dcc:	4604      	mov	r4, r0
 8005dce:	d158      	bne.n	8005e82 <_malloc_r+0xf6>
 8005dd0:	f8d8 4000 	ldr.w	r4, [r8]
 8005dd4:	4627      	mov	r7, r4
 8005dd6:	2f00      	cmp	r7, #0
 8005dd8:	d143      	bne.n	8005e62 <_malloc_r+0xd6>
 8005dda:	2c00      	cmp	r4, #0
 8005ddc:	d04b      	beq.n	8005e76 <_malloc_r+0xea>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	4639      	mov	r1, r7
 8005de2:	4630      	mov	r0, r6
 8005de4:	eb04 0903 	add.w	r9, r4, r3
 8005de8:	f000 fc6c 	bl	80066c4 <_sbrk_r>
 8005dec:	4581      	cmp	r9, r0
 8005dee:	d142      	bne.n	8005e76 <_malloc_r+0xea>
 8005df0:	6821      	ldr	r1, [r4, #0]
 8005df2:	1a6d      	subs	r5, r5, r1
 8005df4:	4629      	mov	r1, r5
 8005df6:	4630      	mov	r0, r6
 8005df8:	f7ff ffa6 	bl	8005d48 <sbrk_aligned>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d03a      	beq.n	8005e76 <_malloc_r+0xea>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	442b      	add	r3, r5
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	f8d8 3000 	ldr.w	r3, [r8]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	bb62      	cbnz	r2, 8005e68 <_malloc_r+0xdc>
 8005e0e:	f8c8 7000 	str.w	r7, [r8]
 8005e12:	e00f      	b.n	8005e34 <_malloc_r+0xa8>
 8005e14:	6822      	ldr	r2, [r4, #0]
 8005e16:	1b52      	subs	r2, r2, r5
 8005e18:	d420      	bmi.n	8005e5c <_malloc_r+0xd0>
 8005e1a:	2a0b      	cmp	r2, #11
 8005e1c:	d917      	bls.n	8005e4e <_malloc_r+0xc2>
 8005e1e:	1961      	adds	r1, r4, r5
 8005e20:	42a3      	cmp	r3, r4
 8005e22:	6025      	str	r5, [r4, #0]
 8005e24:	bf18      	it	ne
 8005e26:	6059      	strne	r1, [r3, #4]
 8005e28:	6863      	ldr	r3, [r4, #4]
 8005e2a:	bf08      	it	eq
 8005e2c:	f8c8 1000 	streq.w	r1, [r8]
 8005e30:	5162      	str	r2, [r4, r5]
 8005e32:	604b      	str	r3, [r1, #4]
 8005e34:	4630      	mov	r0, r6
 8005e36:	f000 f82f 	bl	8005e98 <__malloc_unlock>
 8005e3a:	f104 000b 	add.w	r0, r4, #11
 8005e3e:	1d23      	adds	r3, r4, #4
 8005e40:	f020 0007 	bic.w	r0, r0, #7
 8005e44:	1ac2      	subs	r2, r0, r3
 8005e46:	bf1c      	itt	ne
 8005e48:	1a1b      	subne	r3, r3, r0
 8005e4a:	50a3      	strne	r3, [r4, r2]
 8005e4c:	e7af      	b.n	8005dae <_malloc_r+0x22>
 8005e4e:	6862      	ldr	r2, [r4, #4]
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	bf0c      	ite	eq
 8005e54:	f8c8 2000 	streq.w	r2, [r8]
 8005e58:	605a      	strne	r2, [r3, #4]
 8005e5a:	e7eb      	b.n	8005e34 <_malloc_r+0xa8>
 8005e5c:	4623      	mov	r3, r4
 8005e5e:	6864      	ldr	r4, [r4, #4]
 8005e60:	e7ae      	b.n	8005dc0 <_malloc_r+0x34>
 8005e62:	463c      	mov	r4, r7
 8005e64:	687f      	ldr	r7, [r7, #4]
 8005e66:	e7b6      	b.n	8005dd6 <_malloc_r+0x4a>
 8005e68:	461a      	mov	r2, r3
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	42a3      	cmp	r3, r4
 8005e6e:	d1fb      	bne.n	8005e68 <_malloc_r+0xdc>
 8005e70:	2300      	movs	r3, #0
 8005e72:	6053      	str	r3, [r2, #4]
 8005e74:	e7de      	b.n	8005e34 <_malloc_r+0xa8>
 8005e76:	230c      	movs	r3, #12
 8005e78:	6033      	str	r3, [r6, #0]
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	f000 f80c 	bl	8005e98 <__malloc_unlock>
 8005e80:	e794      	b.n	8005dac <_malloc_r+0x20>
 8005e82:	6005      	str	r5, [r0, #0]
 8005e84:	e7d6      	b.n	8005e34 <_malloc_r+0xa8>
 8005e86:	bf00      	nop
 8005e88:	200003b4 	.word	0x200003b4

08005e8c <__malloc_lock>:
 8005e8c:	4801      	ldr	r0, [pc, #4]	@ (8005e94 <__malloc_lock+0x8>)
 8005e8e:	f7ff bf0e 	b.w	8005cae <__retarget_lock_acquire_recursive>
 8005e92:	bf00      	nop
 8005e94:	200003ac 	.word	0x200003ac

08005e98 <__malloc_unlock>:
 8005e98:	4801      	ldr	r0, [pc, #4]	@ (8005ea0 <__malloc_unlock+0x8>)
 8005e9a:	f7ff bf09 	b.w	8005cb0 <__retarget_lock_release_recursive>
 8005e9e:	bf00      	nop
 8005ea0:	200003ac 	.word	0x200003ac

08005ea4 <__sfputc_r>:
 8005ea4:	6893      	ldr	r3, [r2, #8]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	b410      	push	{r4}
 8005eac:	6093      	str	r3, [r2, #8]
 8005eae:	da08      	bge.n	8005ec2 <__sfputc_r+0x1e>
 8005eb0:	6994      	ldr	r4, [r2, #24]
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	db01      	blt.n	8005eba <__sfputc_r+0x16>
 8005eb6:	290a      	cmp	r1, #10
 8005eb8:	d103      	bne.n	8005ec2 <__sfputc_r+0x1e>
 8005eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ebe:	f000 bb6d 	b.w	800659c <__swbuf_r>
 8005ec2:	6813      	ldr	r3, [r2, #0]
 8005ec4:	1c58      	adds	r0, r3, #1
 8005ec6:	6010      	str	r0, [r2, #0]
 8005ec8:	7019      	strb	r1, [r3, #0]
 8005eca:	4608      	mov	r0, r1
 8005ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <__sfputs_r>:
 8005ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	460f      	mov	r7, r1
 8005ed8:	4614      	mov	r4, r2
 8005eda:	18d5      	adds	r5, r2, r3
 8005edc:	42ac      	cmp	r4, r5
 8005ede:	d101      	bne.n	8005ee4 <__sfputs_r+0x12>
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	e007      	b.n	8005ef4 <__sfputs_r+0x22>
 8005ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee8:	463a      	mov	r2, r7
 8005eea:	4630      	mov	r0, r6
 8005eec:	f7ff ffda 	bl	8005ea4 <__sfputc_r>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d1f3      	bne.n	8005edc <__sfputs_r+0xa>
 8005ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ef8 <_vfiprintf_r>:
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	460d      	mov	r5, r1
 8005efe:	b09d      	sub	sp, #116	@ 0x74
 8005f00:	4614      	mov	r4, r2
 8005f02:	4698      	mov	r8, r3
 8005f04:	4606      	mov	r6, r0
 8005f06:	b118      	cbz	r0, 8005f10 <_vfiprintf_r+0x18>
 8005f08:	6a03      	ldr	r3, [r0, #32]
 8005f0a:	b90b      	cbnz	r3, 8005f10 <_vfiprintf_r+0x18>
 8005f0c:	f7ff fdca 	bl	8005aa4 <__sinit>
 8005f10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f12:	07d9      	lsls	r1, r3, #31
 8005f14:	d405      	bmi.n	8005f22 <_vfiprintf_r+0x2a>
 8005f16:	89ab      	ldrh	r3, [r5, #12]
 8005f18:	059a      	lsls	r2, r3, #22
 8005f1a:	d402      	bmi.n	8005f22 <_vfiprintf_r+0x2a>
 8005f1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f1e:	f7ff fec6 	bl	8005cae <__retarget_lock_acquire_recursive>
 8005f22:	89ab      	ldrh	r3, [r5, #12]
 8005f24:	071b      	lsls	r3, r3, #28
 8005f26:	d501      	bpl.n	8005f2c <_vfiprintf_r+0x34>
 8005f28:	692b      	ldr	r3, [r5, #16]
 8005f2a:	b99b      	cbnz	r3, 8005f54 <_vfiprintf_r+0x5c>
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f000 fb72 	bl	8006618 <__swsetup_r>
 8005f34:	b170      	cbz	r0, 8005f54 <_vfiprintf_r+0x5c>
 8005f36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f38:	07dc      	lsls	r4, r3, #31
 8005f3a:	d504      	bpl.n	8005f46 <_vfiprintf_r+0x4e>
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	b01d      	add	sp, #116	@ 0x74
 8005f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f46:	89ab      	ldrh	r3, [r5, #12]
 8005f48:	0598      	lsls	r0, r3, #22
 8005f4a:	d4f7      	bmi.n	8005f3c <_vfiprintf_r+0x44>
 8005f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f4e:	f7ff feaf 	bl	8005cb0 <__retarget_lock_release_recursive>
 8005f52:	e7f3      	b.n	8005f3c <_vfiprintf_r+0x44>
 8005f54:	2300      	movs	r3, #0
 8005f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f58:	2320      	movs	r3, #32
 8005f5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f62:	2330      	movs	r3, #48	@ 0x30
 8005f64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006114 <_vfiprintf_r+0x21c>
 8005f68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f6c:	f04f 0901 	mov.w	r9, #1
 8005f70:	4623      	mov	r3, r4
 8005f72:	469a      	mov	sl, r3
 8005f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f78:	b10a      	cbz	r2, 8005f7e <_vfiprintf_r+0x86>
 8005f7a:	2a25      	cmp	r2, #37	@ 0x25
 8005f7c:	d1f9      	bne.n	8005f72 <_vfiprintf_r+0x7a>
 8005f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8005f82:	d00b      	beq.n	8005f9c <_vfiprintf_r+0xa4>
 8005f84:	465b      	mov	r3, fp
 8005f86:	4622      	mov	r2, r4
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f7ff ffa1 	bl	8005ed2 <__sfputs_r>
 8005f90:	3001      	adds	r0, #1
 8005f92:	f000 80a7 	beq.w	80060e4 <_vfiprintf_r+0x1ec>
 8005f96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f98:	445a      	add	r2, fp
 8005f9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 809f 	beq.w	80060e4 <_vfiprintf_r+0x1ec>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fb0:	f10a 0a01 	add.w	sl, sl, #1
 8005fb4:	9304      	str	r3, [sp, #16]
 8005fb6:	9307      	str	r3, [sp, #28]
 8005fb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fbe:	4654      	mov	r4, sl
 8005fc0:	2205      	movs	r2, #5
 8005fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc6:	4853      	ldr	r0, [pc, #332]	@ (8006114 <_vfiprintf_r+0x21c>)
 8005fc8:	f7fa f902 	bl	80001d0 <memchr>
 8005fcc:	9a04      	ldr	r2, [sp, #16]
 8005fce:	b9d8      	cbnz	r0, 8006008 <_vfiprintf_r+0x110>
 8005fd0:	06d1      	lsls	r1, r2, #27
 8005fd2:	bf44      	itt	mi
 8005fd4:	2320      	movmi	r3, #32
 8005fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fda:	0713      	lsls	r3, r2, #28
 8005fdc:	bf44      	itt	mi
 8005fde:	232b      	movmi	r3, #43	@ 0x2b
 8005fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fea:	d015      	beq.n	8006018 <_vfiprintf_r+0x120>
 8005fec:	9a07      	ldr	r2, [sp, #28]
 8005fee:	4654      	mov	r4, sl
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	f04f 0c0a 	mov.w	ip, #10
 8005ff6:	4621      	mov	r1, r4
 8005ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ffc:	3b30      	subs	r3, #48	@ 0x30
 8005ffe:	2b09      	cmp	r3, #9
 8006000:	d94b      	bls.n	800609a <_vfiprintf_r+0x1a2>
 8006002:	b1b0      	cbz	r0, 8006032 <_vfiprintf_r+0x13a>
 8006004:	9207      	str	r2, [sp, #28]
 8006006:	e014      	b.n	8006032 <_vfiprintf_r+0x13a>
 8006008:	eba0 0308 	sub.w	r3, r0, r8
 800600c:	fa09 f303 	lsl.w	r3, r9, r3
 8006010:	4313      	orrs	r3, r2
 8006012:	9304      	str	r3, [sp, #16]
 8006014:	46a2      	mov	sl, r4
 8006016:	e7d2      	b.n	8005fbe <_vfiprintf_r+0xc6>
 8006018:	9b03      	ldr	r3, [sp, #12]
 800601a:	1d19      	adds	r1, r3, #4
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	9103      	str	r1, [sp, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	bfbb      	ittet	lt
 8006024:	425b      	neglt	r3, r3
 8006026:	f042 0202 	orrlt.w	r2, r2, #2
 800602a:	9307      	strge	r3, [sp, #28]
 800602c:	9307      	strlt	r3, [sp, #28]
 800602e:	bfb8      	it	lt
 8006030:	9204      	strlt	r2, [sp, #16]
 8006032:	7823      	ldrb	r3, [r4, #0]
 8006034:	2b2e      	cmp	r3, #46	@ 0x2e
 8006036:	d10a      	bne.n	800604e <_vfiprintf_r+0x156>
 8006038:	7863      	ldrb	r3, [r4, #1]
 800603a:	2b2a      	cmp	r3, #42	@ 0x2a
 800603c:	d132      	bne.n	80060a4 <_vfiprintf_r+0x1ac>
 800603e:	9b03      	ldr	r3, [sp, #12]
 8006040:	1d1a      	adds	r2, r3, #4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	9203      	str	r2, [sp, #12]
 8006046:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800604a:	3402      	adds	r4, #2
 800604c:	9305      	str	r3, [sp, #20]
 800604e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006124 <_vfiprintf_r+0x22c>
 8006052:	7821      	ldrb	r1, [r4, #0]
 8006054:	2203      	movs	r2, #3
 8006056:	4650      	mov	r0, sl
 8006058:	f7fa f8ba 	bl	80001d0 <memchr>
 800605c:	b138      	cbz	r0, 800606e <_vfiprintf_r+0x176>
 800605e:	9b04      	ldr	r3, [sp, #16]
 8006060:	eba0 000a 	sub.w	r0, r0, sl
 8006064:	2240      	movs	r2, #64	@ 0x40
 8006066:	4082      	lsls	r2, r0
 8006068:	4313      	orrs	r3, r2
 800606a:	3401      	adds	r4, #1
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006072:	4829      	ldr	r0, [pc, #164]	@ (8006118 <_vfiprintf_r+0x220>)
 8006074:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006078:	2206      	movs	r2, #6
 800607a:	f7fa f8a9 	bl	80001d0 <memchr>
 800607e:	2800      	cmp	r0, #0
 8006080:	d03f      	beq.n	8006102 <_vfiprintf_r+0x20a>
 8006082:	4b26      	ldr	r3, [pc, #152]	@ (800611c <_vfiprintf_r+0x224>)
 8006084:	bb1b      	cbnz	r3, 80060ce <_vfiprintf_r+0x1d6>
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	3307      	adds	r3, #7
 800608a:	f023 0307 	bic.w	r3, r3, #7
 800608e:	3308      	adds	r3, #8
 8006090:	9303      	str	r3, [sp, #12]
 8006092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006094:	443b      	add	r3, r7
 8006096:	9309      	str	r3, [sp, #36]	@ 0x24
 8006098:	e76a      	b.n	8005f70 <_vfiprintf_r+0x78>
 800609a:	fb0c 3202 	mla	r2, ip, r2, r3
 800609e:	460c      	mov	r4, r1
 80060a0:	2001      	movs	r0, #1
 80060a2:	e7a8      	b.n	8005ff6 <_vfiprintf_r+0xfe>
 80060a4:	2300      	movs	r3, #0
 80060a6:	3401      	adds	r4, #1
 80060a8:	9305      	str	r3, [sp, #20]
 80060aa:	4619      	mov	r1, r3
 80060ac:	f04f 0c0a 	mov.w	ip, #10
 80060b0:	4620      	mov	r0, r4
 80060b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060b6:	3a30      	subs	r2, #48	@ 0x30
 80060b8:	2a09      	cmp	r2, #9
 80060ba:	d903      	bls.n	80060c4 <_vfiprintf_r+0x1cc>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0c6      	beq.n	800604e <_vfiprintf_r+0x156>
 80060c0:	9105      	str	r1, [sp, #20]
 80060c2:	e7c4      	b.n	800604e <_vfiprintf_r+0x156>
 80060c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80060c8:	4604      	mov	r4, r0
 80060ca:	2301      	movs	r3, #1
 80060cc:	e7f0      	b.n	80060b0 <_vfiprintf_r+0x1b8>
 80060ce:	ab03      	add	r3, sp, #12
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	462a      	mov	r2, r5
 80060d4:	4b12      	ldr	r3, [pc, #72]	@ (8006120 <_vfiprintf_r+0x228>)
 80060d6:	a904      	add	r1, sp, #16
 80060d8:	4630      	mov	r0, r6
 80060da:	f3af 8000 	nop.w
 80060de:	4607      	mov	r7, r0
 80060e0:	1c78      	adds	r0, r7, #1
 80060e2:	d1d6      	bne.n	8006092 <_vfiprintf_r+0x19a>
 80060e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060e6:	07d9      	lsls	r1, r3, #31
 80060e8:	d405      	bmi.n	80060f6 <_vfiprintf_r+0x1fe>
 80060ea:	89ab      	ldrh	r3, [r5, #12]
 80060ec:	059a      	lsls	r2, r3, #22
 80060ee:	d402      	bmi.n	80060f6 <_vfiprintf_r+0x1fe>
 80060f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060f2:	f7ff fddd 	bl	8005cb0 <__retarget_lock_release_recursive>
 80060f6:	89ab      	ldrh	r3, [r5, #12]
 80060f8:	065b      	lsls	r3, r3, #25
 80060fa:	f53f af1f 	bmi.w	8005f3c <_vfiprintf_r+0x44>
 80060fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006100:	e71e      	b.n	8005f40 <_vfiprintf_r+0x48>
 8006102:	ab03      	add	r3, sp, #12
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	462a      	mov	r2, r5
 8006108:	4b05      	ldr	r3, [pc, #20]	@ (8006120 <_vfiprintf_r+0x228>)
 800610a:	a904      	add	r1, sp, #16
 800610c:	4630      	mov	r0, r6
 800610e:	f000 f879 	bl	8006204 <_printf_i>
 8006112:	e7e4      	b.n	80060de <_vfiprintf_r+0x1e6>
 8006114:	080068d8 	.word	0x080068d8
 8006118:	080068e2 	.word	0x080068e2
 800611c:	00000000 	.word	0x00000000
 8006120:	08005ed3 	.word	0x08005ed3
 8006124:	080068de 	.word	0x080068de

08006128 <_printf_common>:
 8006128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800612c:	4616      	mov	r6, r2
 800612e:	4698      	mov	r8, r3
 8006130:	688a      	ldr	r2, [r1, #8]
 8006132:	690b      	ldr	r3, [r1, #16]
 8006134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006138:	4293      	cmp	r3, r2
 800613a:	bfb8      	it	lt
 800613c:	4613      	movlt	r3, r2
 800613e:	6033      	str	r3, [r6, #0]
 8006140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006144:	4607      	mov	r7, r0
 8006146:	460c      	mov	r4, r1
 8006148:	b10a      	cbz	r2, 800614e <_printf_common+0x26>
 800614a:	3301      	adds	r3, #1
 800614c:	6033      	str	r3, [r6, #0]
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	0699      	lsls	r1, r3, #26
 8006152:	bf42      	ittt	mi
 8006154:	6833      	ldrmi	r3, [r6, #0]
 8006156:	3302      	addmi	r3, #2
 8006158:	6033      	strmi	r3, [r6, #0]
 800615a:	6825      	ldr	r5, [r4, #0]
 800615c:	f015 0506 	ands.w	r5, r5, #6
 8006160:	d106      	bne.n	8006170 <_printf_common+0x48>
 8006162:	f104 0a19 	add.w	sl, r4, #25
 8006166:	68e3      	ldr	r3, [r4, #12]
 8006168:	6832      	ldr	r2, [r6, #0]
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	42ab      	cmp	r3, r5
 800616e:	dc26      	bgt.n	80061be <_printf_common+0x96>
 8006170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006174:	6822      	ldr	r2, [r4, #0]
 8006176:	3b00      	subs	r3, #0
 8006178:	bf18      	it	ne
 800617a:	2301      	movne	r3, #1
 800617c:	0692      	lsls	r2, r2, #26
 800617e:	d42b      	bmi.n	80061d8 <_printf_common+0xb0>
 8006180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006184:	4641      	mov	r1, r8
 8006186:	4638      	mov	r0, r7
 8006188:	47c8      	blx	r9
 800618a:	3001      	adds	r0, #1
 800618c:	d01e      	beq.n	80061cc <_printf_common+0xa4>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	6922      	ldr	r2, [r4, #16]
 8006192:	f003 0306 	and.w	r3, r3, #6
 8006196:	2b04      	cmp	r3, #4
 8006198:	bf02      	ittt	eq
 800619a:	68e5      	ldreq	r5, [r4, #12]
 800619c:	6833      	ldreq	r3, [r6, #0]
 800619e:	1aed      	subeq	r5, r5, r3
 80061a0:	68a3      	ldr	r3, [r4, #8]
 80061a2:	bf0c      	ite	eq
 80061a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061a8:	2500      	movne	r5, #0
 80061aa:	4293      	cmp	r3, r2
 80061ac:	bfc4      	itt	gt
 80061ae:	1a9b      	subgt	r3, r3, r2
 80061b0:	18ed      	addgt	r5, r5, r3
 80061b2:	2600      	movs	r6, #0
 80061b4:	341a      	adds	r4, #26
 80061b6:	42b5      	cmp	r5, r6
 80061b8:	d11a      	bne.n	80061f0 <_printf_common+0xc8>
 80061ba:	2000      	movs	r0, #0
 80061bc:	e008      	b.n	80061d0 <_printf_common+0xa8>
 80061be:	2301      	movs	r3, #1
 80061c0:	4652      	mov	r2, sl
 80061c2:	4641      	mov	r1, r8
 80061c4:	4638      	mov	r0, r7
 80061c6:	47c8      	blx	r9
 80061c8:	3001      	adds	r0, #1
 80061ca:	d103      	bne.n	80061d4 <_printf_common+0xac>
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295
 80061d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d4:	3501      	adds	r5, #1
 80061d6:	e7c6      	b.n	8006166 <_printf_common+0x3e>
 80061d8:	18e1      	adds	r1, r4, r3
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	2030      	movs	r0, #48	@ 0x30
 80061de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061e2:	4422      	add	r2, r4
 80061e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061ec:	3302      	adds	r3, #2
 80061ee:	e7c7      	b.n	8006180 <_printf_common+0x58>
 80061f0:	2301      	movs	r3, #1
 80061f2:	4622      	mov	r2, r4
 80061f4:	4641      	mov	r1, r8
 80061f6:	4638      	mov	r0, r7
 80061f8:	47c8      	blx	r9
 80061fa:	3001      	adds	r0, #1
 80061fc:	d0e6      	beq.n	80061cc <_printf_common+0xa4>
 80061fe:	3601      	adds	r6, #1
 8006200:	e7d9      	b.n	80061b6 <_printf_common+0x8e>
	...

08006204 <_printf_i>:
 8006204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006208:	7e0f      	ldrb	r7, [r1, #24]
 800620a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800620c:	2f78      	cmp	r7, #120	@ 0x78
 800620e:	4691      	mov	r9, r2
 8006210:	4680      	mov	r8, r0
 8006212:	460c      	mov	r4, r1
 8006214:	469a      	mov	sl, r3
 8006216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800621a:	d807      	bhi.n	800622c <_printf_i+0x28>
 800621c:	2f62      	cmp	r7, #98	@ 0x62
 800621e:	d80a      	bhi.n	8006236 <_printf_i+0x32>
 8006220:	2f00      	cmp	r7, #0
 8006222:	f000 80d2 	beq.w	80063ca <_printf_i+0x1c6>
 8006226:	2f58      	cmp	r7, #88	@ 0x58
 8006228:	f000 80b9 	beq.w	800639e <_printf_i+0x19a>
 800622c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006234:	e03a      	b.n	80062ac <_printf_i+0xa8>
 8006236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800623a:	2b15      	cmp	r3, #21
 800623c:	d8f6      	bhi.n	800622c <_printf_i+0x28>
 800623e:	a101      	add	r1, pc, #4	@ (adr r1, 8006244 <_printf_i+0x40>)
 8006240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006244:	0800629d 	.word	0x0800629d
 8006248:	080062b1 	.word	0x080062b1
 800624c:	0800622d 	.word	0x0800622d
 8006250:	0800622d 	.word	0x0800622d
 8006254:	0800622d 	.word	0x0800622d
 8006258:	0800622d 	.word	0x0800622d
 800625c:	080062b1 	.word	0x080062b1
 8006260:	0800622d 	.word	0x0800622d
 8006264:	0800622d 	.word	0x0800622d
 8006268:	0800622d 	.word	0x0800622d
 800626c:	0800622d 	.word	0x0800622d
 8006270:	080063b1 	.word	0x080063b1
 8006274:	080062db 	.word	0x080062db
 8006278:	0800636b 	.word	0x0800636b
 800627c:	0800622d 	.word	0x0800622d
 8006280:	0800622d 	.word	0x0800622d
 8006284:	080063d3 	.word	0x080063d3
 8006288:	0800622d 	.word	0x0800622d
 800628c:	080062db 	.word	0x080062db
 8006290:	0800622d 	.word	0x0800622d
 8006294:	0800622d 	.word	0x0800622d
 8006298:	08006373 	.word	0x08006373
 800629c:	6833      	ldr	r3, [r6, #0]
 800629e:	1d1a      	adds	r2, r3, #4
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6032      	str	r2, [r6, #0]
 80062a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062ac:	2301      	movs	r3, #1
 80062ae:	e09d      	b.n	80063ec <_printf_i+0x1e8>
 80062b0:	6833      	ldr	r3, [r6, #0]
 80062b2:	6820      	ldr	r0, [r4, #0]
 80062b4:	1d19      	adds	r1, r3, #4
 80062b6:	6031      	str	r1, [r6, #0]
 80062b8:	0606      	lsls	r6, r0, #24
 80062ba:	d501      	bpl.n	80062c0 <_printf_i+0xbc>
 80062bc:	681d      	ldr	r5, [r3, #0]
 80062be:	e003      	b.n	80062c8 <_printf_i+0xc4>
 80062c0:	0645      	lsls	r5, r0, #25
 80062c2:	d5fb      	bpl.n	80062bc <_printf_i+0xb8>
 80062c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	da03      	bge.n	80062d4 <_printf_i+0xd0>
 80062cc:	232d      	movs	r3, #45	@ 0x2d
 80062ce:	426d      	negs	r5, r5
 80062d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062d4:	4859      	ldr	r0, [pc, #356]	@ (800643c <_printf_i+0x238>)
 80062d6:	230a      	movs	r3, #10
 80062d8:	e011      	b.n	80062fe <_printf_i+0xfa>
 80062da:	6821      	ldr	r1, [r4, #0]
 80062dc:	6833      	ldr	r3, [r6, #0]
 80062de:	0608      	lsls	r0, r1, #24
 80062e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80062e4:	d402      	bmi.n	80062ec <_printf_i+0xe8>
 80062e6:	0649      	lsls	r1, r1, #25
 80062e8:	bf48      	it	mi
 80062ea:	b2ad      	uxthmi	r5, r5
 80062ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80062ee:	4853      	ldr	r0, [pc, #332]	@ (800643c <_printf_i+0x238>)
 80062f0:	6033      	str	r3, [r6, #0]
 80062f2:	bf14      	ite	ne
 80062f4:	230a      	movne	r3, #10
 80062f6:	2308      	moveq	r3, #8
 80062f8:	2100      	movs	r1, #0
 80062fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062fe:	6866      	ldr	r6, [r4, #4]
 8006300:	60a6      	str	r6, [r4, #8]
 8006302:	2e00      	cmp	r6, #0
 8006304:	bfa2      	ittt	ge
 8006306:	6821      	ldrge	r1, [r4, #0]
 8006308:	f021 0104 	bicge.w	r1, r1, #4
 800630c:	6021      	strge	r1, [r4, #0]
 800630e:	b90d      	cbnz	r5, 8006314 <_printf_i+0x110>
 8006310:	2e00      	cmp	r6, #0
 8006312:	d04b      	beq.n	80063ac <_printf_i+0x1a8>
 8006314:	4616      	mov	r6, r2
 8006316:	fbb5 f1f3 	udiv	r1, r5, r3
 800631a:	fb03 5711 	mls	r7, r3, r1, r5
 800631e:	5dc7      	ldrb	r7, [r0, r7]
 8006320:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006324:	462f      	mov	r7, r5
 8006326:	42bb      	cmp	r3, r7
 8006328:	460d      	mov	r5, r1
 800632a:	d9f4      	bls.n	8006316 <_printf_i+0x112>
 800632c:	2b08      	cmp	r3, #8
 800632e:	d10b      	bne.n	8006348 <_printf_i+0x144>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	07df      	lsls	r7, r3, #31
 8006334:	d508      	bpl.n	8006348 <_printf_i+0x144>
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	6861      	ldr	r1, [r4, #4]
 800633a:	4299      	cmp	r1, r3
 800633c:	bfde      	ittt	le
 800633e:	2330      	movle	r3, #48	@ 0x30
 8006340:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006344:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006348:	1b92      	subs	r2, r2, r6
 800634a:	6122      	str	r2, [r4, #16]
 800634c:	f8cd a000 	str.w	sl, [sp]
 8006350:	464b      	mov	r3, r9
 8006352:	aa03      	add	r2, sp, #12
 8006354:	4621      	mov	r1, r4
 8006356:	4640      	mov	r0, r8
 8006358:	f7ff fee6 	bl	8006128 <_printf_common>
 800635c:	3001      	adds	r0, #1
 800635e:	d14a      	bne.n	80063f6 <_printf_i+0x1f2>
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	b004      	add	sp, #16
 8006366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	f043 0320 	orr.w	r3, r3, #32
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	4833      	ldr	r0, [pc, #204]	@ (8006440 <_printf_i+0x23c>)
 8006374:	2778      	movs	r7, #120	@ 0x78
 8006376:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	6831      	ldr	r1, [r6, #0]
 800637e:	061f      	lsls	r7, r3, #24
 8006380:	f851 5b04 	ldr.w	r5, [r1], #4
 8006384:	d402      	bmi.n	800638c <_printf_i+0x188>
 8006386:	065f      	lsls	r7, r3, #25
 8006388:	bf48      	it	mi
 800638a:	b2ad      	uxthmi	r5, r5
 800638c:	6031      	str	r1, [r6, #0]
 800638e:	07d9      	lsls	r1, r3, #31
 8006390:	bf44      	itt	mi
 8006392:	f043 0320 	orrmi.w	r3, r3, #32
 8006396:	6023      	strmi	r3, [r4, #0]
 8006398:	b11d      	cbz	r5, 80063a2 <_printf_i+0x19e>
 800639a:	2310      	movs	r3, #16
 800639c:	e7ac      	b.n	80062f8 <_printf_i+0xf4>
 800639e:	4827      	ldr	r0, [pc, #156]	@ (800643c <_printf_i+0x238>)
 80063a0:	e7e9      	b.n	8006376 <_printf_i+0x172>
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	f023 0320 	bic.w	r3, r3, #32
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	e7f6      	b.n	800639a <_printf_i+0x196>
 80063ac:	4616      	mov	r6, r2
 80063ae:	e7bd      	b.n	800632c <_printf_i+0x128>
 80063b0:	6833      	ldr	r3, [r6, #0]
 80063b2:	6825      	ldr	r5, [r4, #0]
 80063b4:	6961      	ldr	r1, [r4, #20]
 80063b6:	1d18      	adds	r0, r3, #4
 80063b8:	6030      	str	r0, [r6, #0]
 80063ba:	062e      	lsls	r6, r5, #24
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	d501      	bpl.n	80063c4 <_printf_i+0x1c0>
 80063c0:	6019      	str	r1, [r3, #0]
 80063c2:	e002      	b.n	80063ca <_printf_i+0x1c6>
 80063c4:	0668      	lsls	r0, r5, #25
 80063c6:	d5fb      	bpl.n	80063c0 <_printf_i+0x1bc>
 80063c8:	8019      	strh	r1, [r3, #0]
 80063ca:	2300      	movs	r3, #0
 80063cc:	6123      	str	r3, [r4, #16]
 80063ce:	4616      	mov	r6, r2
 80063d0:	e7bc      	b.n	800634c <_printf_i+0x148>
 80063d2:	6833      	ldr	r3, [r6, #0]
 80063d4:	1d1a      	adds	r2, r3, #4
 80063d6:	6032      	str	r2, [r6, #0]
 80063d8:	681e      	ldr	r6, [r3, #0]
 80063da:	6862      	ldr	r2, [r4, #4]
 80063dc:	2100      	movs	r1, #0
 80063de:	4630      	mov	r0, r6
 80063e0:	f7f9 fef6 	bl	80001d0 <memchr>
 80063e4:	b108      	cbz	r0, 80063ea <_printf_i+0x1e6>
 80063e6:	1b80      	subs	r0, r0, r6
 80063e8:	6060      	str	r0, [r4, #4]
 80063ea:	6863      	ldr	r3, [r4, #4]
 80063ec:	6123      	str	r3, [r4, #16]
 80063ee:	2300      	movs	r3, #0
 80063f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063f4:	e7aa      	b.n	800634c <_printf_i+0x148>
 80063f6:	6923      	ldr	r3, [r4, #16]
 80063f8:	4632      	mov	r2, r6
 80063fa:	4649      	mov	r1, r9
 80063fc:	4640      	mov	r0, r8
 80063fe:	47d0      	blx	sl
 8006400:	3001      	adds	r0, #1
 8006402:	d0ad      	beq.n	8006360 <_printf_i+0x15c>
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	079b      	lsls	r3, r3, #30
 8006408:	d413      	bmi.n	8006432 <_printf_i+0x22e>
 800640a:	68e0      	ldr	r0, [r4, #12]
 800640c:	9b03      	ldr	r3, [sp, #12]
 800640e:	4298      	cmp	r0, r3
 8006410:	bfb8      	it	lt
 8006412:	4618      	movlt	r0, r3
 8006414:	e7a6      	b.n	8006364 <_printf_i+0x160>
 8006416:	2301      	movs	r3, #1
 8006418:	4632      	mov	r2, r6
 800641a:	4649      	mov	r1, r9
 800641c:	4640      	mov	r0, r8
 800641e:	47d0      	blx	sl
 8006420:	3001      	adds	r0, #1
 8006422:	d09d      	beq.n	8006360 <_printf_i+0x15c>
 8006424:	3501      	adds	r5, #1
 8006426:	68e3      	ldr	r3, [r4, #12]
 8006428:	9903      	ldr	r1, [sp, #12]
 800642a:	1a5b      	subs	r3, r3, r1
 800642c:	42ab      	cmp	r3, r5
 800642e:	dcf2      	bgt.n	8006416 <_printf_i+0x212>
 8006430:	e7eb      	b.n	800640a <_printf_i+0x206>
 8006432:	2500      	movs	r5, #0
 8006434:	f104 0619 	add.w	r6, r4, #25
 8006438:	e7f5      	b.n	8006426 <_printf_i+0x222>
 800643a:	bf00      	nop
 800643c:	080068e9 	.word	0x080068e9
 8006440:	080068fa 	.word	0x080068fa

08006444 <__sflush_r>:
 8006444:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644c:	0716      	lsls	r6, r2, #28
 800644e:	4605      	mov	r5, r0
 8006450:	460c      	mov	r4, r1
 8006452:	d454      	bmi.n	80064fe <__sflush_r+0xba>
 8006454:	684b      	ldr	r3, [r1, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	dc02      	bgt.n	8006460 <__sflush_r+0x1c>
 800645a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd48      	ble.n	80064f2 <__sflush_r+0xae>
 8006460:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006462:	2e00      	cmp	r6, #0
 8006464:	d045      	beq.n	80064f2 <__sflush_r+0xae>
 8006466:	2300      	movs	r3, #0
 8006468:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800646c:	682f      	ldr	r7, [r5, #0]
 800646e:	6a21      	ldr	r1, [r4, #32]
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	d030      	beq.n	80064d6 <__sflush_r+0x92>
 8006474:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006476:	89a3      	ldrh	r3, [r4, #12]
 8006478:	0759      	lsls	r1, r3, #29
 800647a:	d505      	bpl.n	8006488 <__sflush_r+0x44>
 800647c:	6863      	ldr	r3, [r4, #4]
 800647e:	1ad2      	subs	r2, r2, r3
 8006480:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006482:	b10b      	cbz	r3, 8006488 <__sflush_r+0x44>
 8006484:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	2300      	movs	r3, #0
 800648a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800648c:	6a21      	ldr	r1, [r4, #32]
 800648e:	4628      	mov	r0, r5
 8006490:	47b0      	blx	r6
 8006492:	1c43      	adds	r3, r0, #1
 8006494:	89a3      	ldrh	r3, [r4, #12]
 8006496:	d106      	bne.n	80064a6 <__sflush_r+0x62>
 8006498:	6829      	ldr	r1, [r5, #0]
 800649a:	291d      	cmp	r1, #29
 800649c:	d82b      	bhi.n	80064f6 <__sflush_r+0xb2>
 800649e:	4a2a      	ldr	r2, [pc, #168]	@ (8006548 <__sflush_r+0x104>)
 80064a0:	410a      	asrs	r2, r1
 80064a2:	07d6      	lsls	r6, r2, #31
 80064a4:	d427      	bmi.n	80064f6 <__sflush_r+0xb2>
 80064a6:	2200      	movs	r2, #0
 80064a8:	6062      	str	r2, [r4, #4]
 80064aa:	04d9      	lsls	r1, r3, #19
 80064ac:	6922      	ldr	r2, [r4, #16]
 80064ae:	6022      	str	r2, [r4, #0]
 80064b0:	d504      	bpl.n	80064bc <__sflush_r+0x78>
 80064b2:	1c42      	adds	r2, r0, #1
 80064b4:	d101      	bne.n	80064ba <__sflush_r+0x76>
 80064b6:	682b      	ldr	r3, [r5, #0]
 80064b8:	b903      	cbnz	r3, 80064bc <__sflush_r+0x78>
 80064ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80064bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064be:	602f      	str	r7, [r5, #0]
 80064c0:	b1b9      	cbz	r1, 80064f2 <__sflush_r+0xae>
 80064c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064c6:	4299      	cmp	r1, r3
 80064c8:	d002      	beq.n	80064d0 <__sflush_r+0x8c>
 80064ca:	4628      	mov	r0, r5
 80064cc:	f7ff fbf2 	bl	8005cb4 <_free_r>
 80064d0:	2300      	movs	r3, #0
 80064d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80064d4:	e00d      	b.n	80064f2 <__sflush_r+0xae>
 80064d6:	2301      	movs	r3, #1
 80064d8:	4628      	mov	r0, r5
 80064da:	47b0      	blx	r6
 80064dc:	4602      	mov	r2, r0
 80064de:	1c50      	adds	r0, r2, #1
 80064e0:	d1c9      	bne.n	8006476 <__sflush_r+0x32>
 80064e2:	682b      	ldr	r3, [r5, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0c6      	beq.n	8006476 <__sflush_r+0x32>
 80064e8:	2b1d      	cmp	r3, #29
 80064ea:	d001      	beq.n	80064f0 <__sflush_r+0xac>
 80064ec:	2b16      	cmp	r3, #22
 80064ee:	d11e      	bne.n	800652e <__sflush_r+0xea>
 80064f0:	602f      	str	r7, [r5, #0]
 80064f2:	2000      	movs	r0, #0
 80064f4:	e022      	b.n	800653c <__sflush_r+0xf8>
 80064f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064fa:	b21b      	sxth	r3, r3
 80064fc:	e01b      	b.n	8006536 <__sflush_r+0xf2>
 80064fe:	690f      	ldr	r7, [r1, #16]
 8006500:	2f00      	cmp	r7, #0
 8006502:	d0f6      	beq.n	80064f2 <__sflush_r+0xae>
 8006504:	0793      	lsls	r3, r2, #30
 8006506:	680e      	ldr	r6, [r1, #0]
 8006508:	bf08      	it	eq
 800650a:	694b      	ldreq	r3, [r1, #20]
 800650c:	600f      	str	r7, [r1, #0]
 800650e:	bf18      	it	ne
 8006510:	2300      	movne	r3, #0
 8006512:	eba6 0807 	sub.w	r8, r6, r7
 8006516:	608b      	str	r3, [r1, #8]
 8006518:	f1b8 0f00 	cmp.w	r8, #0
 800651c:	dde9      	ble.n	80064f2 <__sflush_r+0xae>
 800651e:	6a21      	ldr	r1, [r4, #32]
 8006520:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006522:	4643      	mov	r3, r8
 8006524:	463a      	mov	r2, r7
 8006526:	4628      	mov	r0, r5
 8006528:	47b0      	blx	r6
 800652a:	2800      	cmp	r0, #0
 800652c:	dc08      	bgt.n	8006540 <__sflush_r+0xfc>
 800652e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006536:	81a3      	strh	r3, [r4, #12]
 8006538:	f04f 30ff 	mov.w	r0, #4294967295
 800653c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006540:	4407      	add	r7, r0
 8006542:	eba8 0800 	sub.w	r8, r8, r0
 8006546:	e7e7      	b.n	8006518 <__sflush_r+0xd4>
 8006548:	dfbffffe 	.word	0xdfbffffe

0800654c <_fflush_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	690b      	ldr	r3, [r1, #16]
 8006550:	4605      	mov	r5, r0
 8006552:	460c      	mov	r4, r1
 8006554:	b913      	cbnz	r3, 800655c <_fflush_r+0x10>
 8006556:	2500      	movs	r5, #0
 8006558:	4628      	mov	r0, r5
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	b118      	cbz	r0, 8006566 <_fflush_r+0x1a>
 800655e:	6a03      	ldr	r3, [r0, #32]
 8006560:	b90b      	cbnz	r3, 8006566 <_fflush_r+0x1a>
 8006562:	f7ff fa9f 	bl	8005aa4 <__sinit>
 8006566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0f3      	beq.n	8006556 <_fflush_r+0xa>
 800656e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006570:	07d0      	lsls	r0, r2, #31
 8006572:	d404      	bmi.n	800657e <_fflush_r+0x32>
 8006574:	0599      	lsls	r1, r3, #22
 8006576:	d402      	bmi.n	800657e <_fflush_r+0x32>
 8006578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800657a:	f7ff fb98 	bl	8005cae <__retarget_lock_acquire_recursive>
 800657e:	4628      	mov	r0, r5
 8006580:	4621      	mov	r1, r4
 8006582:	f7ff ff5f 	bl	8006444 <__sflush_r>
 8006586:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006588:	07da      	lsls	r2, r3, #31
 800658a:	4605      	mov	r5, r0
 800658c:	d4e4      	bmi.n	8006558 <_fflush_r+0xc>
 800658e:	89a3      	ldrh	r3, [r4, #12]
 8006590:	059b      	lsls	r3, r3, #22
 8006592:	d4e1      	bmi.n	8006558 <_fflush_r+0xc>
 8006594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006596:	f7ff fb8b 	bl	8005cb0 <__retarget_lock_release_recursive>
 800659a:	e7dd      	b.n	8006558 <_fflush_r+0xc>

0800659c <__swbuf_r>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	460e      	mov	r6, r1
 80065a0:	4614      	mov	r4, r2
 80065a2:	4605      	mov	r5, r0
 80065a4:	b118      	cbz	r0, 80065ae <__swbuf_r+0x12>
 80065a6:	6a03      	ldr	r3, [r0, #32]
 80065a8:	b90b      	cbnz	r3, 80065ae <__swbuf_r+0x12>
 80065aa:	f7ff fa7b 	bl	8005aa4 <__sinit>
 80065ae:	69a3      	ldr	r3, [r4, #24]
 80065b0:	60a3      	str	r3, [r4, #8]
 80065b2:	89a3      	ldrh	r3, [r4, #12]
 80065b4:	071a      	lsls	r2, r3, #28
 80065b6:	d501      	bpl.n	80065bc <__swbuf_r+0x20>
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	b943      	cbnz	r3, 80065ce <__swbuf_r+0x32>
 80065bc:	4621      	mov	r1, r4
 80065be:	4628      	mov	r0, r5
 80065c0:	f000 f82a 	bl	8006618 <__swsetup_r>
 80065c4:	b118      	cbz	r0, 80065ce <__swbuf_r+0x32>
 80065c6:	f04f 37ff 	mov.w	r7, #4294967295
 80065ca:	4638      	mov	r0, r7
 80065cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	6922      	ldr	r2, [r4, #16]
 80065d2:	1a98      	subs	r0, r3, r2
 80065d4:	6963      	ldr	r3, [r4, #20]
 80065d6:	b2f6      	uxtb	r6, r6
 80065d8:	4283      	cmp	r3, r0
 80065da:	4637      	mov	r7, r6
 80065dc:	dc05      	bgt.n	80065ea <__swbuf_r+0x4e>
 80065de:	4621      	mov	r1, r4
 80065e0:	4628      	mov	r0, r5
 80065e2:	f7ff ffb3 	bl	800654c <_fflush_r>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d1ed      	bne.n	80065c6 <__swbuf_r+0x2a>
 80065ea:	68a3      	ldr	r3, [r4, #8]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	60a3      	str	r3, [r4, #8]
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	6022      	str	r2, [r4, #0]
 80065f6:	701e      	strb	r6, [r3, #0]
 80065f8:	6962      	ldr	r2, [r4, #20]
 80065fa:	1c43      	adds	r3, r0, #1
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d004      	beq.n	800660a <__swbuf_r+0x6e>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	07db      	lsls	r3, r3, #31
 8006604:	d5e1      	bpl.n	80065ca <__swbuf_r+0x2e>
 8006606:	2e0a      	cmp	r6, #10
 8006608:	d1df      	bne.n	80065ca <__swbuf_r+0x2e>
 800660a:	4621      	mov	r1, r4
 800660c:	4628      	mov	r0, r5
 800660e:	f7ff ff9d 	bl	800654c <_fflush_r>
 8006612:	2800      	cmp	r0, #0
 8006614:	d0d9      	beq.n	80065ca <__swbuf_r+0x2e>
 8006616:	e7d6      	b.n	80065c6 <__swbuf_r+0x2a>

08006618 <__swsetup_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4b29      	ldr	r3, [pc, #164]	@ (80066c0 <__swsetup_r+0xa8>)
 800661c:	4605      	mov	r5, r0
 800661e:	6818      	ldr	r0, [r3, #0]
 8006620:	460c      	mov	r4, r1
 8006622:	b118      	cbz	r0, 800662c <__swsetup_r+0x14>
 8006624:	6a03      	ldr	r3, [r0, #32]
 8006626:	b90b      	cbnz	r3, 800662c <__swsetup_r+0x14>
 8006628:	f7ff fa3c 	bl	8005aa4 <__sinit>
 800662c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006630:	0719      	lsls	r1, r3, #28
 8006632:	d422      	bmi.n	800667a <__swsetup_r+0x62>
 8006634:	06da      	lsls	r2, r3, #27
 8006636:	d407      	bmi.n	8006648 <__swsetup_r+0x30>
 8006638:	2209      	movs	r2, #9
 800663a:	602a      	str	r2, [r5, #0]
 800663c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006640:	81a3      	strh	r3, [r4, #12]
 8006642:	f04f 30ff 	mov.w	r0, #4294967295
 8006646:	e033      	b.n	80066b0 <__swsetup_r+0x98>
 8006648:	0758      	lsls	r0, r3, #29
 800664a:	d512      	bpl.n	8006672 <__swsetup_r+0x5a>
 800664c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800664e:	b141      	cbz	r1, 8006662 <__swsetup_r+0x4a>
 8006650:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006654:	4299      	cmp	r1, r3
 8006656:	d002      	beq.n	800665e <__swsetup_r+0x46>
 8006658:	4628      	mov	r0, r5
 800665a:	f7ff fb2b 	bl	8005cb4 <_free_r>
 800665e:	2300      	movs	r3, #0
 8006660:	6363      	str	r3, [r4, #52]	@ 0x34
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006668:	81a3      	strh	r3, [r4, #12]
 800666a:	2300      	movs	r3, #0
 800666c:	6063      	str	r3, [r4, #4]
 800666e:	6923      	ldr	r3, [r4, #16]
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	89a3      	ldrh	r3, [r4, #12]
 8006674:	f043 0308 	orr.w	r3, r3, #8
 8006678:	81a3      	strh	r3, [r4, #12]
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	b94b      	cbnz	r3, 8006692 <__swsetup_r+0x7a>
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006688:	d003      	beq.n	8006692 <__swsetup_r+0x7a>
 800668a:	4621      	mov	r1, r4
 800668c:	4628      	mov	r0, r5
 800668e:	f000 f84f 	bl	8006730 <__smakebuf_r>
 8006692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006696:	f013 0201 	ands.w	r2, r3, #1
 800669a:	d00a      	beq.n	80066b2 <__swsetup_r+0x9a>
 800669c:	2200      	movs	r2, #0
 800669e:	60a2      	str	r2, [r4, #8]
 80066a0:	6962      	ldr	r2, [r4, #20]
 80066a2:	4252      	negs	r2, r2
 80066a4:	61a2      	str	r2, [r4, #24]
 80066a6:	6922      	ldr	r2, [r4, #16]
 80066a8:	b942      	cbnz	r2, 80066bc <__swsetup_r+0xa4>
 80066aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80066ae:	d1c5      	bne.n	800663c <__swsetup_r+0x24>
 80066b0:	bd38      	pop	{r3, r4, r5, pc}
 80066b2:	0799      	lsls	r1, r3, #30
 80066b4:	bf58      	it	pl
 80066b6:	6962      	ldrpl	r2, [r4, #20]
 80066b8:	60a2      	str	r2, [r4, #8]
 80066ba:	e7f4      	b.n	80066a6 <__swsetup_r+0x8e>
 80066bc:	2000      	movs	r0, #0
 80066be:	e7f7      	b.n	80066b0 <__swsetup_r+0x98>
 80066c0:	20000018 	.word	0x20000018

080066c4 <_sbrk_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4d06      	ldr	r5, [pc, #24]	@ (80066e0 <_sbrk_r+0x1c>)
 80066c8:	2300      	movs	r3, #0
 80066ca:	4604      	mov	r4, r0
 80066cc:	4608      	mov	r0, r1
 80066ce:	602b      	str	r3, [r5, #0]
 80066d0:	f7fa fe9c 	bl	800140c <_sbrk>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d102      	bne.n	80066de <_sbrk_r+0x1a>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	b103      	cbz	r3, 80066de <_sbrk_r+0x1a>
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	200003a8 	.word	0x200003a8

080066e4 <__swhatbuf_r>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	460c      	mov	r4, r1
 80066e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ec:	2900      	cmp	r1, #0
 80066ee:	b096      	sub	sp, #88	@ 0x58
 80066f0:	4615      	mov	r5, r2
 80066f2:	461e      	mov	r6, r3
 80066f4:	da0d      	bge.n	8006712 <__swhatbuf_r+0x2e>
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066fc:	f04f 0100 	mov.w	r1, #0
 8006700:	bf14      	ite	ne
 8006702:	2340      	movne	r3, #64	@ 0x40
 8006704:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006708:	2000      	movs	r0, #0
 800670a:	6031      	str	r1, [r6, #0]
 800670c:	602b      	str	r3, [r5, #0]
 800670e:	b016      	add	sp, #88	@ 0x58
 8006710:	bd70      	pop	{r4, r5, r6, pc}
 8006712:	466a      	mov	r2, sp
 8006714:	f000 f848 	bl	80067a8 <_fstat_r>
 8006718:	2800      	cmp	r0, #0
 800671a:	dbec      	blt.n	80066f6 <__swhatbuf_r+0x12>
 800671c:	9901      	ldr	r1, [sp, #4]
 800671e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006722:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006726:	4259      	negs	r1, r3
 8006728:	4159      	adcs	r1, r3
 800672a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800672e:	e7eb      	b.n	8006708 <__swhatbuf_r+0x24>

08006730 <__smakebuf_r>:
 8006730:	898b      	ldrh	r3, [r1, #12]
 8006732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006734:	079d      	lsls	r5, r3, #30
 8006736:	4606      	mov	r6, r0
 8006738:	460c      	mov	r4, r1
 800673a:	d507      	bpl.n	800674c <__smakebuf_r+0x1c>
 800673c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	6123      	str	r3, [r4, #16]
 8006744:	2301      	movs	r3, #1
 8006746:	6163      	str	r3, [r4, #20]
 8006748:	b003      	add	sp, #12
 800674a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800674c:	ab01      	add	r3, sp, #4
 800674e:	466a      	mov	r2, sp
 8006750:	f7ff ffc8 	bl	80066e4 <__swhatbuf_r>
 8006754:	9f00      	ldr	r7, [sp, #0]
 8006756:	4605      	mov	r5, r0
 8006758:	4639      	mov	r1, r7
 800675a:	4630      	mov	r0, r6
 800675c:	f7ff fb16 	bl	8005d8c <_malloc_r>
 8006760:	b948      	cbnz	r0, 8006776 <__smakebuf_r+0x46>
 8006762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006766:	059a      	lsls	r2, r3, #22
 8006768:	d4ee      	bmi.n	8006748 <__smakebuf_r+0x18>
 800676a:	f023 0303 	bic.w	r3, r3, #3
 800676e:	f043 0302 	orr.w	r3, r3, #2
 8006772:	81a3      	strh	r3, [r4, #12]
 8006774:	e7e2      	b.n	800673c <__smakebuf_r+0xc>
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	6020      	str	r0, [r4, #0]
 800677a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677e:	81a3      	strh	r3, [r4, #12]
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006786:	b15b      	cbz	r3, 80067a0 <__smakebuf_r+0x70>
 8006788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800678c:	4630      	mov	r0, r6
 800678e:	f000 f81d 	bl	80067cc <_isatty_r>
 8006792:	b128      	cbz	r0, 80067a0 <__smakebuf_r+0x70>
 8006794:	89a3      	ldrh	r3, [r4, #12]
 8006796:	f023 0303 	bic.w	r3, r3, #3
 800679a:	f043 0301 	orr.w	r3, r3, #1
 800679e:	81a3      	strh	r3, [r4, #12]
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	431d      	orrs	r5, r3
 80067a4:	81a5      	strh	r5, [r4, #12]
 80067a6:	e7cf      	b.n	8006748 <__smakebuf_r+0x18>

080067a8 <_fstat_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4d07      	ldr	r5, [pc, #28]	@ (80067c8 <_fstat_r+0x20>)
 80067ac:	2300      	movs	r3, #0
 80067ae:	4604      	mov	r4, r0
 80067b0:	4608      	mov	r0, r1
 80067b2:	4611      	mov	r1, r2
 80067b4:	602b      	str	r3, [r5, #0]
 80067b6:	f7fa fe00 	bl	80013ba <_fstat>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	d102      	bne.n	80067c4 <_fstat_r+0x1c>
 80067be:	682b      	ldr	r3, [r5, #0]
 80067c0:	b103      	cbz	r3, 80067c4 <_fstat_r+0x1c>
 80067c2:	6023      	str	r3, [r4, #0]
 80067c4:	bd38      	pop	{r3, r4, r5, pc}
 80067c6:	bf00      	nop
 80067c8:	200003a8 	.word	0x200003a8

080067cc <_isatty_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4d06      	ldr	r5, [pc, #24]	@ (80067e8 <_isatty_r+0x1c>)
 80067d0:	2300      	movs	r3, #0
 80067d2:	4604      	mov	r4, r0
 80067d4:	4608      	mov	r0, r1
 80067d6:	602b      	str	r3, [r5, #0]
 80067d8:	f7fa fdff 	bl	80013da <_isatty>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d102      	bne.n	80067e6 <_isatty_r+0x1a>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	b103      	cbz	r3, 80067e6 <_isatty_r+0x1a>
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	bd38      	pop	{r3, r4, r5, pc}
 80067e8:	200003a8 	.word	0x200003a8

080067ec <_init>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	bf00      	nop
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr

080067f8 <_fini>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	bf00      	nop
 80067fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fe:	bc08      	pop	{r3}
 8006800:	469e      	mov	lr, r3
 8006802:	4770      	bx	lr
